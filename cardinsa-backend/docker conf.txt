# DOCKER CONFIGURATION
# ==============================================================================
# Dockerfile
FROM python:3.11-slim

# Set working directory
WORKDIR /app

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

# Install system dependencies
RUN apt-get update \
    && apt-get install -y --no-install-recommends \
        gcc \
        libpq-dev \
        libmagic1 \
    && rm -rf /var/lib/apt/lists/*

# Copy and install Python dependencies
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copy application code
COPY . .

# Create non-root user
RUN groupadd -r appuser && useradd -r -g appuser appuser
RUN chown -R appuser:appuser /app
USER appuser

# Health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Expose port
EXPOSE 8000

# Run application
CMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000"]

# ==============================================================================
# DOCKER COMPOSE FOR DEVELOPMENT
# ==============================================================================
# docker-compose.yml
version: '3.8'

services:
  # Main API service
  api:
    build: .
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://cardinsa_user:cardinsa_pass@db:5432/cardinsa_db
      - REDIS_URL=redis://redis:6379/0
      - ENVIRONMENT=development
    volumes:
      - .:/app
      - uploads:/app/uploads
    depends_on:
      - db
      - redis
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload

  # PostgreSQL database
  db:
    image: postgis/postgis:15-3.4
    environment:
      - POSTGRES_DB=cardinsa_db
      - POSTGRES_USER=cardinsa_user
      - POSTGRES_PASSWORD=cardinsa_pass
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init_db.sql:/docker-entrypoint-initdb.d/01-init.sql

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data

  # Celery worker for background tasks
  worker:
    build: .
    environment:
      - DATABASE_URL=postgresql://cardinsa_user:cardinsa_pass@db:5432/cardinsa_db
      - REDIS_URL=redis://redis:6379/0
    volumes:
      - .:/app
      - uploads:/app/uploads
    depends_on:
      - db
      - redis
    command: celery -A app.tasks.celery_app worker --loglevel=info

  # Celery flower for monitoring
  flower:
    build: .
    ports:
      - "5555:5555"
    environment:
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      - redis
    command: celery -A app.tasks.celery_app flower

volumes:
  postgres_data:
  redis_data:
  uploads: