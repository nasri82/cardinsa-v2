"""baseline v1.1

Revision ID: 7e845a7c1fda
Revises: 
Create Date: 2025-09-09 14:15:23.262478

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '7e845a7c1fda'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('regulatory_compliance')
    op.drop_table('data_import_logs')
    op.drop_table('smart_home_events')
    op.drop_table('blockchain_transactions')
    op.drop_table('permission_audit_logs')
    op.drop_table('commission_rules')
    op.drop_index('idx_documents_status', table_name='documents')
    op.drop_index('idx_documents_uploaded_by', table_name='documents')
    op.drop_table('documents')
    op.drop_table('member_tags')
    op.drop_table('audit_trail_events')
    op.drop_table('reinsurance_agreements')
    op.drop_table('customer_journey_events')
    op.drop_table('member_login_logs')
    op.drop_table('provider_audit_logs')
    op.drop_table('document_intelligence')
    op.drop_table('reinsurance_commissions')
    op.drop_table('ml_models')
    op.drop_table('voice_assistants')
    op.drop_table('provider_working_hours')
    op.drop_table('real_time_catastrophe_monitoring')
    op.drop_table('ai_pricing_traces')
    op.drop_table('vr_training_modules')
    op.drop_table('voice_interactions')
    op.drop_table('ml_experiments')
    op.drop_index('idx_document_versions_doc', table_name='document_versions')
    op.drop_table('document_versions')
    op.drop_table('provider_service_prices')
    op.drop_table('real_time_fraud_scores')
    op.drop_table('product_catalog')
    op.drop_table('quotation_audit_log')
    op.drop_table('locales')
    op.drop_table('quotation_pricing_rule_age_brackets')
    op.drop_table('benefit_categories')
    op.drop_index('idx_bordereau_reports_agreement', table_name='bordereau_reports')
    op.drop_table('bordereau_reports')
    op.drop_table('actuarial_tables')
    op.drop_table('business_processes')
    op.drop_table('speech_analytics_models')
    op.drop_table('provider_availability_exceptions')
    op.drop_table('integration_logs')
    op.drop_table('skills_demand_forecast')
    op.drop_table('smart_home_systems')
    op.drop_table('claim_checklists')
    op.drop_table('premium_copayment')
    op.drop_table('quotation_pricing_rules_history')
    op.drop_table('prediction_results')
    op.drop_table('regulatory_reports')
    op.drop_table('treaty_types')
    op.drop_table('login_sessions')
    op.drop_table('financial_accounts')
    op.drop_table('quotation_items')
    op.drop_table('underwriting_profiles')
    op.drop_table('status_logs')
    op.drop_table('roles_backup')
    op.drop_index('idx_departments_company_id', table_name='departments')
    op.drop_table('departments')
    op.drop_table('chaos_experiment_runs')
    op.drop_table('policy_endorsements')
    op.drop_index('idx_user_preferences_member', table_name='user_preferences', postgresql_where='(member_id IS NOT NULL)')
    op.drop_index('idx_user_preferences_user', table_name='user_preferences', postgresql_where='(user_id IS NOT NULL)')
    op.drop_table('user_preferences')
    op.drop_table('archived_policies')
    op.drop_table('climate_scenarios')
    op.drop_table('model_versions')
    op.drop_table('report_components')
    op.drop_table('digital_twin_models')
    op.drop_table('prediction_batch_jobs')
    op.drop_index('idx_aggregate_covers_agreement', table_name='aggregate_covers')
    op.drop_table('aggregate_covers')
    op.drop_index('idx_idem_expires', table_name='idempotency_keys')
    op.drop_table('idempotency_keys')
    op.drop_table('iot_device_types')
    op.drop_table('provider_ratings')
    op.drop_table('real_time_recommendations')
    op.drop_table('external_field_mappings')
    op.drop_table('cms_pages')
    op.drop_index('idx_benefit_alert_logs_alert_type', table_name='benefit_alert_logs')
    op.drop_index('idx_benefit_alert_logs_member_id', table_name='benefit_alert_logs')
    op.drop_index('idx_benefit_alert_logs_sent_at', table_name='benefit_alert_logs')
    op.drop_table('benefit_alert_logs')
    op.drop_table('audit_logs_template')
    op.drop_table('billing_cycles')
    op.drop_table('entities')
    op.drop_table('customer_segment_analytics')
    op.drop_table('policy_dependents')
    op.drop_table('journal_entries')
    op.drop_table('saas_feature_flags')
    op.drop_table('faq_entries')
    op.drop_table('financial_periods')
    op.drop_table('process_instances')
    op.drop_table('login_devices')
    op.drop_table('competitor_intelligence')
    op.drop_table('group_admins')
    op.drop_table('regulatory_frameworks')
    op.drop_table('knowledge_categories')
    op.drop_table('forecasts')
    op.drop_table('provider_claims')
    op.drop_index('idx_brokers_active', table_name='brokers', postgresql_where='(is_active = true)')
    op.drop_table('brokers')
    op.drop_table('member_persona_mapping')
    op.drop_index('idx_custom_fields_entity_type', table_name='custom_fields')
    op.drop_table('custom_fields')
    op.drop_table('general_ledger_accounts')
    op.drop_table('policy_versions')
    op.drop_table('sessions')
    op.drop_table('data_quality_rules')
    op.drop_table('skills_development_plans')
    op.drop_table('external_service_status')
    op.drop_table('ar_vr_applications')
    op.drop_table('fiscal_periods')
    op.drop_table('marketing_campaigns')
    op.drop_table('public_card_views')
    op.drop_table('group_demographics')
    op.drop_table('underwriting_decision_matrix')
    op.drop_index('idx_doc_public_tokens_doc', table_name='document_public_tokens')
    op.drop_table('document_public_tokens')
    op.drop_table('customer_journey_touchpoints')
    op.drop_index('idx_broker_assignments_broker', table_name='broker_assignments')
    op.drop_table('broker_assignments')
    op.drop_index('idx_benefit_conditions_schedule_id', table_name='benefit_conditions')
    op.drop_table('benefit_conditions')
    op.drop_index('ix_user_roles_company_id', table_name='user_roles')
    op.drop_index('ix_user_roles_department_id', table_name='user_roles')
    op.drop_index('ix_user_roles_unit_id', table_name='user_roles')
    op.drop_index('ux_user_roles_scope', table_name='user_roles')
    op.drop_table('user_roles')
    op.drop_table('provider_types')
    op.drop_table('plan_exclusion_links')
    op.drop_table('universe_outcomes')
    op.drop_table('support_response_templates')
    op.drop_table('risk_assessments')
    op.drop_index('idx_collections_logs_next_action', table_name='collections_logs')
    op.drop_index('idx_collections_logs_overdue', table_name='collections_logs')
    op.drop_index('idx_collections_logs_policy_id', table_name='collections_logs')
    op.drop_index('idx_collections_logs_status', table_name='collections_logs')
    op.drop_table('collections_logs')
    op.drop_table('parallel_scenarios')
    op.drop_table('employee_skills')
    op.drop_table('customer_lifetime_value')
    op.drop_table('underwriting_rules')
    op.drop_table('simulation_results')
    op.drop_table('saas_plans')
    op.drop_table('performance_metrics')
    op.drop_table('data_requests')
    op.drop_table('customer_risk_profiles')
    op.drop_table('benefit_preapproval_rules')
    op.drop_table('api_keys')
    op.drop_table('app_versions')
    op.drop_table('cards')
    op.drop_table('decentralized_identities')
    op.drop_table('customer_lifecycle_stages')
    op.drop_index('idx_benefit_translations_schedule_lang', table_name='benefit_translations')
    op.drop_table('benefit_translations')
    op.drop_table('premium_schedules')
    op.drop_table('cpt_codes')
    op.drop_table('provider_contacts')
    op.drop_table('voice_analytics')
    op.drop_table('report_analytics')
    op.drop_index('ux_roles_name', table_name='roles')
    op.drop_table('roles')
    op.drop_index('idx_policy_cancellations_effective_date', table_name='policy_cancellations')
    op.drop_index('idx_policy_cancellations_policy_id', table_name='policy_cancellations')
    op.drop_index('idx_policy_cancellations_status', table_name='policy_cancellations')
    op.drop_table('policy_cancellations')
    op.drop_table('nlp_models')
    op.drop_index('idx_gest_assignment_status', table_name='garage_estimates')
    op.drop_table('garage_estimates')
    op.drop_index('idx_cga_provider_status', table_name='claim_garage_assignments')
    op.drop_index('ux_cga_claim_active', table_name='claim_garage_assignments', postgresql_where="(status = ANY (ARRAY['assigned'::garage_assignment_status, 'collaborating'::garage_assignment_status]))")
    op.drop_table('claim_garage_assignments')
    op.drop_table('permission_restrictions')
    op.drop_table('computer_vision_models')
    op.drop_table('premium_coinsurance')
    op.drop_index('idx_auth_refresh_tokens_session', table_name='auth_refresh_tokens')
    op.drop_index('idx_auth_refresh_tokens_user', table_name='auth_refresh_tokens')
    op.drop_table('auth_refresh_tokens')
    op.drop_table('satellite_imagery')
    op.drop_table('provider_tags')
    op.drop_table('quotation_pricing_profile_rules')
    op.drop_table('company_esg_scores')
    op.drop_index('idx_workflow_queue_entity_type_status', table_name='workflow_queue')
    op.drop_index('idx_workflow_queue_processing', table_name='workflow_queue', postgresql_where="((status)::text = 'pending'::text)")
    op.drop_table('workflow_queue')
    op.drop_table('countries')
    op.drop_table('customer_personas')
    op.drop_table('scheduled_tasks')
    op.drop_table('cultural_preferences')
    op.drop_table('audit_logs')
    op.drop_table('qr_styles')
    op.drop_table('recommendation_models')
    op.drop_table('vr_training_sessions')
    op.drop_table('quotation_coverage_options')
    op.drop_table('member_history')
    op.drop_table('chaos_experiments')
    op.drop_table('document_signatures')
    op.drop_table('provider_documents')
    op.drop_table('encryption_zones')
    op.drop_table('session_embeddings')
    op.drop_table('bi_dashboards')
    op.drop_table('market_signals')
    op.drop_table('topology')
    op.drop_table('usage_logs')
    op.drop_table('treaty_cessions')
    op.drop_table('premium_override_logs')
    op.drop_table('premium_regions')
    op.drop_table('coverages')
    op.drop_table('document_expiry_alerts')
    op.drop_table('cohort_analysis')
    op.drop_table('premium_age_brackets')
    op.drop_table('premium_networks')
    op.drop_table('template_variables')
    op.drop_table('saas_plan_features')
    op.drop_table('policy_types')
    op.drop_table('claim_assessments')
    op.drop_table('ticket_requests')
    op.drop_table('quotation_pricing_profiles')
    op.drop_table('api_rate_limits')
    op.drop_index('idx_benefit_change_log_changed_at', table_name='benefit_change_log')
    op.drop_index('idx_benefit_change_log_schedule_id', table_name='benefit_change_log')
    op.drop_table('benefit_change_log')
    op.drop_table('qr_view_logs')
    op.drop_table('policy_status_logs')
    op.drop_table('personalized_content_delivery')
    op.drop_table('ai_tasks')
    op.drop_index('idx_doc_access_audience', table_name='document_access')
    op.drop_index('idx_doc_access_doc', table_name='document_access')
    op.drop_table('document_access')
    op.drop_table('group_audit_logs')
    op.drop_table('underwriting_workflow_steps')
    op.drop_table('skills_gap_analysis')
    op.drop_table('provider_flags')
    op.drop_table('policy_payments')
    op.drop_table('catastrophe_detection_models')
    op.drop_table('underwriting_applications')
    op.drop_index('idx_companies_name_search', table_name='companies', postgresql_using='gin')
    op.drop_table('companies')
    op.drop_table('translations_enhanced')
    op.drop_table('regions')
    op.drop_table('coverage_options')
    op.drop_table('groups')
    op.drop_table('pricing_profiles')
    op.drop_table('treaty_statements')
    op.drop_index('idx_iot_devices_type', table_name='iot_devices')
    op.drop_index('idx_iot_devices_type_active', table_name='iot_devices', postgresql_where="((status)::text = 'active'::text)")
    op.drop_table('iot_devices')
    op.drop_table('exclusions')
    op.drop_table('claim_approvers')
    op.drop_table('data_quality_checks')
    op.drop_index('idx_catastrophe_models_peril_region', table_name='catastrophe_models')
    op.drop_table('catastrophe_models')
    op.drop_table('provider_network_members')
    op.drop_table('provider_images')
    op.drop_table('ai_conversations')
    op.drop_table('languages')
    op.drop_table('bi_dashboard_cache')
    op.drop_table('security_sessions')
    op.drop_table('policy_schedule')
    op.drop_table('decision_universes')
    op.drop_table('conversation_memory')
    op.drop_table('pricing_models')
    op.drop_table('plan_types')
    op.drop_index('idx_claims_member_id', table_name='claims')
    op.drop_index('idx_claims_member_policy_status_concurrent', table_name='claims')
    op.drop_index('idx_claims_policy_id', table_name='claims')
    op.drop_index('idx_claims_status_date', table_name='claims')
    op.drop_table('claims')
    op.drop_table('quotation_factors')
    op.drop_table('versioned_documents')
    op.drop_table('exchange_rates')
    op.drop_table('blockchain_networks')
    op.drop_table('forecasting_models')
    op.drop_table('cities')
    op.drop_table('report_shares')
    op.drop_table('conversational_ai_models')
    op.drop_table('sustainability_indicators')
    op.drop_table('training_datasets')
    op.drop_table('pricing_version_logs')
    op.drop_index('idx_delegates_active', table_name='delegates', postgresql_where='(is_active = true)')
    op.drop_index('idx_delegates_company', table_name='delegates')
    op.drop_table('delegates')
    op.drop_table('language_settings')
    op.drop_table('payment_methods')
    op.drop_table('data_annotations')
    op.drop_table('medical_cards')
    op.drop_table('quantum_computations')
    op.drop_table('process_step_executions')
    op.drop_table('time_series_metrics')
    op.drop_table('report_comments')
    op.drop_table('notifications_read_log')
    op.drop_table('provider_network_assignments')
    op.drop_table('wearable_devices')
    op.drop_index('idx_report_schedules_active', table_name='report_schedules', postgresql_where='(is_active = true)')
    op.drop_index('idx_report_schedules_template_id', table_name='report_schedules')
    op.drop_table('report_schedules')
    op.drop_table('premium_rules')
    op.drop_table('users_backup')
    op.drop_table('states')
    op.drop_table('motor_exclusion_categories')
    op.drop_table('regulatory_requirements')
    op.drop_table('policy_coverages')
    op.drop_table('serendipity_patterns')
    op.drop_table('icd10_codes')
    op.drop_table('providers')
    op.drop_table('billing_statements')
    op.drop_table('policy_channels')
    op.drop_table('member_signatures')
    op.drop_index('idx_plan_benefit_schedules_active', table_name='plan_benefit_schedules', postgresql_where='(is_active = true)')
    op.drop_index('idx_plan_benefit_schedules_category_id', table_name='plan_benefit_schedules')
    op.drop_index('idx_plan_benefit_schedules_plan_id', table_name='plan_benefit_schedules')
    op.drop_table('plan_benefit_schedules')
    op.drop_table('compliance_monitoring')
    op.drop_index('idx_gest_actions_estimate', table_name='garage_estimate_actions')
    op.drop_table('garage_estimate_actions')
    op.drop_index('idx_del_document', table_name='document_entity_links')
    op.drop_index('idx_del_entity', table_name='document_entity_links')
    op.drop_table('document_entity_links')
    op.drop_table('dependents')
    op.drop_table('premium_deductible')
    op.drop_table('carbon_emission_sources')
    op.drop_table('motor_exclusion_codes')
    op.drop_table('premium_deductibles')
    op.drop_index('idx_gest_items_estimate', table_name='garage_estimate_items')
    op.drop_index('ux_gest_items_estimate_line', table_name='garage_estimate_items')
    op.drop_table('garage_estimate_items')
    op.drop_table('discounts_promotions')
    op.drop_index('idx_member_benefit_usage_benefit_type', table_name='member_benefit_usage')
    op.drop_index('idx_member_benefit_usage_exhausted', table_name='member_benefit_usage', postgresql_where='(is_exhausted = true)')
    op.drop_index('idx_member_benefit_usage_member_policy', table_name='member_benefit_usage')
    op.drop_index('idx_member_benefit_usage_utilization', table_name='member_benefit_usage')
    op.drop_table('member_benefit_usage')
    op.drop_table('mfa_methods')
    op.drop_index('ux_role_permissions_role_perm', table_name='role_permissions')
    op.drop_index('ux_role_permissions_unique', table_name='role_permissions')
    op.drop_table('role_permissions')
    op.drop_table('premium_settings')
    op.drop_table('serendipity_recommendations')
    op.drop_table('premium_copay')
    op.drop_table('health_metrics')
    op.drop_index('idx_members_active_company', table_name='members', postgresql_where='(is_active = true)')
    op.drop_index('idx_members_company_active_concurrent', table_name='members', postgresql_where='(is_active = true)')
    op.drop_index('idx_members_company_id', table_name='members')
    op.drop_index('idx_members_name_search', table_name='members', postgresql_using='gin')
    op.drop_index('idx_members_search_concurrent', table_name='members', postgresql_using='gin')
    op.drop_table('members')
    op.drop_table('user_passwords')
    op.drop_table('bot_executions')
    op.drop_table('premium_industries')
    op.drop_table('serendipity_discoveries')
    op.drop_table('quotation_attachments')
    op.drop_index('idx_business_intelligence_alert_configurations', table_name='business_intelligence', postgresql_using='gin')
    op.drop_index('idx_business_intelligence_analysis_type', table_name='business_intelligence')
    op.drop_index('idx_business_intelligence_created_at', table_name='business_intelligence')
    op.drop_index('idx_business_intelligence_dashboard_subscriptions', table_name='business_intelligence', postgresql_using='gin')
    op.drop_index('idx_business_intelligence_insights', table_name='business_intelligence', postgresql_using='gin')
    op.drop_index('idx_business_intelligence_is_active', table_name='business_intelligence')
    op.drop_index('idx_business_intelligence_key_metrics', table_name='business_intelligence', postgresql_using='gin')
    op.drop_index('idx_business_intelligence_real_time_metrics', table_name='business_intelligence', postgresql_using='gin')
    op.drop_table('business_intelligence')
    op.drop_table('mfa_sessions')
    op.drop_table('journal_entry_lines')
    op.drop_table('risk_factors')
    op.drop_table('template_categories')
    op.drop_table('reinsurance_claims')
    op.drop_table('churn_predictions')
    op.drop_table('product_features')
    op.drop_index('idx_policy_flags_active', table_name='policy_flags', postgresql_where='(is_active = true)')
    op.drop_index('idx_policy_flags_policy_id', table_name='policy_flags')
    op.drop_index('idx_policy_flags_severity', table_name='policy_flags')
    op.drop_index('idx_policy_flags_type', table_name='policy_flags')
    op.drop_table('policy_flags')
    op.drop_table('campaign_performance')
    op.drop_table('endorsements')
    op.drop_table('agent_commissions')
    op.drop_table('uuid_conversion_log')
    op.drop_table('external_data_sources')
    op.drop_table('data_exports')
    op.drop_table('telematics_data')
    op.drop_table('layer')
    op.drop_table('plans')
    op.drop_table('ai_ocr_results')
    op.drop_table('market_data_sources')
    op.drop_table('premium_services')
    op.drop_table('external_services')
    op.drop_table('login_attempts')
    op.drop_table('smart_contracts')
    op.drop_table('commission_statements')
    op.drop_table('cryptographic_algorithms')
    op.drop_table('customers')
    op.drop_table('knowledge_articles')
    op.drop_table('underwriting_logs')
    op.drop_table('system_configuration')
    op.drop_table('satellite_providers')
    op.drop_table('policy_lifecycle_stages')
    op.drop_table('browser_fingerprints')
    op.drop_table('cohort_definitions')
    op.drop_table('automation_workflows')
    op.drop_table('user_roles_backup')
    op.drop_table('units')
    op.drop_table('document_revisions')
    op.drop_table('system_settings')
    op.drop_table('bi_widgets')
    op.drop_index('idx_report_templates_category', table_name='report_templates')
    op.drop_index('idx_report_templates_created_at', table_name='report_templates')
    op.drop_index('idx_report_templates_data_sources', table_name='report_templates', postgresql_using='gin')
    op.drop_index('idx_report_templates_type', table_name='report_templates')
    op.drop_index('idx_report_templates_visual_layout', table_name='report_templates', postgresql_using='gin')
    op.drop_table('report_templates')
    op.drop_index('idx_notification_queue_recipient_status', table_name='notification_queue')
    op.drop_table('notification_queue')
    op.drop_table('customer_segments')
    op.drop_table('ai_feature_usage')
    op.drop_table('report_favorites')
    op.drop_table('webhook_events')
    op.drop_table('otp_requests')
    op.drop_table('underwriting_documents')
    op.drop_table('motor_cards')
    op.drop_table('provider_services')
    op.drop_table('group_contacts')
    op.drop_table('translations')
    op.drop_table('quotation_logs')
    op.drop_table('skills_taxonomy')
    op.drop_index('idx_report_instances_created_at', table_name='report_instances')
    op.drop_index('idx_report_instances_status', table_name='report_instances')
    op.drop_index('idx_report_instances_template_id', table_name='report_instances')
    op.drop_table('report_instances')
    op.drop_table('quotation_workflow_logs')
    op.drop_table('verifiable_credentials')
    op.drop_table('customer_360_profiles')
    op.drop_table('language_keys')
    op.drop_index('idx_custom_field_values_entity', table_name='custom_field_values')
    op.drop_index('idx_custom_field_values_field', table_name='custom_field_values')
    op.drop_table('custom_field_values')
    op.drop_table('retention_forecasts')
    op.drop_table('users')
    op.drop_table('iot_alerts')
    op.drop_index('idx_claim_action_logs_action_type', table_name='claim_action_logs')
    op.drop_index('idx_claim_action_logs_claim_id', table_name='claim_action_logs')
    op.drop_index('idx_claim_action_logs_taken_at', table_name='claim_action_logs')
    op.drop_table('claim_action_logs')
    op.drop_table('market_impact_analysis')
    op.drop_table('ai_image_analysis')
    op.drop_index('idx_treaty_reinstatements_agreement', table_name='treaty_reinstatements')
    op.drop_table('treaty_reinstatements')
    op.drop_table('quotation_pricing_rules')
    op.drop_table('premium_calculations')
    op.drop_table('fraud_detection_models')
    op.drop_index('idx_member_utilization_member_policy', table_name='member_benefit_utilization')
    op.drop_table('member_benefit_utilization')
    op.drop_table('accounting_audit_logs')
    op.drop_table('universe_recommendations')
    op.drop_table('quotation_documents')
    op.drop_table('climate_risk_assessments')
    op.drop_table('quotation_versions')
    op.drop_table('chat_contexts')
    op.drop_table('system_resilience_metrics')
    op.drop_table('claim_history')
    op.drop_table('ai_utils')
    op.drop_index('idx_event_outbox_unpublished', table_name='event_outbox', postgresql_where='(published_at IS NULL)')
    op.drop_table('event_outbox')
    op.drop_table('user_preferences_ai')
    op.drop_table('geographic_pricing_factors')
    op.drop_table('ai_task_templates')
    op.drop_table('auth_revoked_jti')
    op.drop_table('quotation_pricing_profiles_history')
    op.drop_table('entity_types')
    op.drop_table('plan_exclusions')
    op.drop_table('age_brackets')
    op.drop_table('underwriting_actions')
    op.drop_table('simulation_validation')
    op.drop_index('ux_permissions_code', table_name='permissions')
    op.drop_index('ux_permissions_resource_action', table_name='permissions')
    op.drop_table('permissions')
    op.drop_index('idx_policies_active_status_concurrent', table_name='policies', postgresql_where="(status = 'active'::policy_status)")
    op.drop_index('idx_policies_member_id', table_name='policies')
    op.drop_index('idx_policies_plan_id', table_name='policies')
    op.drop_index('idx_policies_status_effective', table_name='policies')
    op.drop_table('policies')
    op.drop_table('security_incidents')
    op.drop_table('spatial_ref_sys')
    op.drop_index('idx_quotations_active_concurrent', table_name='quotations', postgresql_where="((status)::text = 'active'::text)")
    op.drop_table('quotations')
    op.drop_table('ar_damage_assessments')
    op.drop_table('payment_transactions')
    op.drop_index('idx_generated_docs_target', table_name='generated_documents')
    op.drop_table('generated_documents')
    op.drop_table('regulatory_flags')
    op.drop_table('provider_specialties')
    op.drop_index('idx_policy_overrides_policy_benefit', table_name='policy_benefit_overrides')
    op.drop_table('policy_benefit_overrides')
    op.drop_index('idx_system_flags_company', table_name='system_flags')
    op.drop_index('idx_system_flags_enabled', table_name='system_flags', postgresql_where='(is_enabled = true)')
    op.drop_index('idx_system_flags_flag_name', table_name='system_flags')
    op.drop_table('system_flags')
    op.drop_table('document_templates')
    op.drop_table('gdpr_consent_logs')
    op.drop_table('carbon_emissions_tracking')
    op.drop_table('rating_factors')
    op.drop_index('idx_activity_log_user_created', table_name='activity_log')
    op.drop_table('activity_log')
    op.drop_table('ticket_categories')
    op.drop_table('member_audit_logs')
    op.drop_table('iot_data_streams')
    op.drop_table('content_templates')
    op.drop_table('esg_frameworks')
    op.drop_table('policy_renewals')
    op.drop_index('idx_pool_participations_type', table_name='pool_participations')
    op.drop_table('pool_participations')
    op.drop_table('time_series_data')
    op.drop_table('claim_documents')
    op.drop_table('payment_receipts')
    op.drop_table('reinsurance_partners')
    op.drop_table('quantum_safe_keys')
    op.drop_table('premium_invoices')
    op.drop_table('provider_networks')
    op.drop_table('prediction_models')
    op.drop_table('treaty_programs')
    op.drop_table('behavior_scores')
    op.drop_table('quantum_algorithms')
    op.drop_table('policy_exclusion_links')
    op.drop_table('underwriting_decisions')
    op.drop_table('simulation_scenarios')
    op.drop_table('password_policies')
    op.drop_table('plan_coverage_links')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('plan_coverage_links',
    sa.Column('plan_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('coverage_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('coverage_amount', sa.NUMERIC(precision=15, scale=2), autoincrement=False, nullable=True),
    sa.Column('deductible', sa.NUMERIC(precision=15, scale=2), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('copay_percentage', sa.NUMERIC(precision=5, scale=2), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('unit', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('frequency_limit', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('is_mandatory', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('approval_needed', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('limit_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('sub_category', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('condition_tag', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('specific_limit', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('is_excluded', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('password_policies',
    sa.Column('company_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('policy_name', sa.VARCHAR(length=100), server_default=sa.text("'default'::character varying"), autoincrement=False, nullable=True),
    sa.Column('min_length', sa.INTEGER(), server_default=sa.text('8'), autoincrement=False, nullable=True),
    sa.Column('max_length', sa.INTEGER(), server_default=sa.text('128'), autoincrement=False, nullable=True),
    sa.Column('require_uppercase', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('require_lowercase', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('require_numbers', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('require_symbols', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('forbidden_sequences', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True),
    sa.Column('password_history_count', sa.INTEGER(), server_default=sa.text('5'), autoincrement=False, nullable=True),
    sa.Column('max_age_days', sa.INTEGER(), server_default=sa.text('90'), autoincrement=False, nullable=True),
    sa.Column('warning_days_before_expiry', sa.INTEGER(), server_default=sa.text('7'), autoincrement=False, nullable=True),
    sa.Column('max_failed_attempts', sa.INTEGER(), server_default=sa.text('5'), autoincrement=False, nullable=True),
    sa.Column('lockout_duration_minutes', sa.INTEGER(), server_default=sa.text('30'), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False)
    )
    op.create_table('simulation_scenarios',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('twin_model_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('scenario_name', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('scenario_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('scenario_description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('input_parameters', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('simulation_duration_months', sa.INTEGER(), server_default=sa.text('12'), autoincrement=False, nullable=True),
    sa.Column('monte_carlo_iterations', sa.INTEGER(), server_default=sa.text('1000'), autoincrement=False, nullable=True),
    sa.Column('scenario_assumptions', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('confidence_intervals', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['twin_model_id'], ['digital_twin_models.id'], name='simulation_scenarios_twin_model_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='simulation_scenarios_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('underwriting_decisions',
    sa.Column('application_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('rule_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('decision', postgresql.ENUM('accept', 'decline', 'refer', 'counter_offer', 'conditional_accept', name='underwriting_decision'), autoincrement=False, nullable=False),
    sa.Column('risk_score', sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=True),
    sa.Column('premium_adjustment', sa.NUMERIC(precision=15, scale=2), autoincrement=False, nullable=True),
    sa.Column('conditions_applied', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('underwriter_notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('automated', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('reviewed_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('decision_date', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('decided_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('decision_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('decision_score', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('decision_notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('decided_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('policy_exclusion_links',
    sa.Column('policy_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('exclusion_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('quantum_algorithms',
    sa.Column('algorithm_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('quantum_advantage_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('qubit_requirements', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('circuit_depth', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('gate_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('error_tolerance', sa.NUMERIC(precision=10, scale=8), autoincrement=False, nullable=True),
    sa.Column('classical_complexity', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('quantum_complexity', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('use_cases', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('implementation_status', sa.VARCHAR(length=30), autoincrement=False, nullable=True),
    sa.Column('hardware_requirements', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('behavior_scores',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('member_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('device_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('score_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('score_value', sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=True),
    sa.Column('score_period_start', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('score_period_end', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('contributing_factors', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('improvement_suggestions', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('discount_eligibility', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('discount_percentage', sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['device_id'], ['iot_devices.id'], name='fk_behavior_scores_device', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['member_id'], ['members.id'], name='fk_behavior_scores_member', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='behavior_scores_pkey')
    )
    op.create_table('treaty_programs',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('program_name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('treaty_type_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('year', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('prediction_models',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('model_name', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('prediction_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('algorithm_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('training_features', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('model_parameters', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('performance_metrics', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('prediction_horizon_days', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('confidence_threshold', sa.NUMERIC(precision=3, scale=2), server_default=sa.text('0.8'), autoincrement=False, nullable=True),
    sa.Column('model_file_path', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('model_version', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('deployment_status', sa.VARCHAR(length=30), server_default=sa.text("'development'::character varying"), autoincrement=False, nullable=True),
    sa.Column('last_retrained', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('retraining_frequency', sa.VARCHAR(length=20), server_default=sa.text("'monthly'::character varying"), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='prediction_models_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('provider_networks',
    sa.Column('code', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('type', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('company_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.CheckConstraint("type::text = ANY (ARRAY['medical'::character varying::text, 'motor'::character varying::text])", name='provider_networks_type_check')
    )
    op.create_table('premium_invoices',
    sa.Column('invoice_number', sa.VARCHAR(length=30), autoincrement=False, nullable=False),
    sa.Column('policy_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('premium_schedule_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('billing_period_start', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('billing_period_end', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('premium_amount', sa.NUMERIC(precision=15, scale=2), autoincrement=False, nullable=False),
    sa.Column('taxes', sa.NUMERIC(precision=15, scale=2), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('fees', sa.NUMERIC(precision=15, scale=2), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('discounts', sa.NUMERIC(precision=15, scale=2), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('total_amount', sa.NUMERIC(precision=15, scale=2), autoincrement=False, nullable=False),
    sa.Column('due_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('invoice_date', sa.DATE(), server_default=sa.text('CURRENT_DATE'), autoincrement=False, nullable=True),
    sa.Column('status', postgresql.ENUM('pending', 'processing', 'completed', 'failed', 'refunded', 'disputed', 'cancelled', name='payment_status'), server_default=sa.text("'pending'::payment_status"), autoincrement=False, nullable=True),
    sa.Column('payment_method', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('payment_reference', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('paid_amount', sa.NUMERIC(precision=15, scale=2), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('paid_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='premium_invoices_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('quantum_safe_keys',
    sa.Column('key_id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=True),
    sa.Column('algorithm_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('key_usage', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('public_key', postgresql.BYTEA(), autoincrement=False, nullable=True),
    sa.Column('private_key_reference', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('key_generation_timestamp', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('expiration_timestamp', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('revocation_timestamp', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('key_status', sa.VARCHAR(length=30), server_default=sa.text("'active'::character varying"), autoincrement=False, nullable=True),
    sa.Column('associated_entity_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('associated_entity_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False)
    )
    op.create_table('reinsurance_partners',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('code', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('contact_email', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('rating', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('type', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('logo_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('payment_receipts',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('payment_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('received_from', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('amount', sa.NUMERIC(precision=14, scale=2), autoincrement=False, nullable=True),
    sa.Column('method', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('reference', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('status', sa.TEXT(), server_default=sa.text("'confirmed'::text"), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('claim_documents',
    sa.Column('claim_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('document_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('file_name', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('file_path', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('file_size', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('mime_type', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('uploaded_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('is_verified', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('verification_notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('time_series_data',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('metric_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('entity_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('entity_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('timestamp', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('value', sa.NUMERIC(precision=20, scale=8), autoincrement=False, nullable=True),
    sa.Column('labels', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('quality_score', sa.NUMERIC(precision=3, scale=2), server_default=sa.text('1.0'), autoincrement=False, nullable=True),
    sa.Column('is_anomaly', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('anomaly_score', sa.NUMERIC(precision=5, scale=4), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('pool_participations',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('pool_name', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('pool_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('participation_percentage', sa.NUMERIC(precision=8, scale=4), autoincrement=False, nullable=False),
    sa.Column('maximum_line', sa.NUMERIC(precision=15, scale=2), autoincrement=False, nullable=True),
    sa.Column('joining_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('exit_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('annual_deposit', sa.NUMERIC(precision=15, scale=2), autoincrement=False, nullable=True),
    sa.Column('profit_share_percentage', sa.NUMERIC(precision=8, scale=4), autoincrement=False, nullable=True),
    sa.Column('management_expense_percentage', sa.NUMERIC(precision=8, scale=4), autoincrement=False, nullable=True),
    sa.Column('pool_manager', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('pool_agreement_terms', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('currency', sa.VARCHAR(length=3), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='pool_participations_pkey'),
    comment='Insurance pool participations (terrorism, nuclear, etc.)'
    )
    op.create_index('idx_pool_participations_type', 'pool_participations', ['pool_type', 'is_active'], unique=False)
    op.create_table('policy_renewals',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('quotation_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('previous_policy_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('renewal_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('premium_before_renewal', sa.NUMERIC(precision=15, scale=2), autoincrement=False, nullable=True),
    sa.Column('renewal_premium', sa.NUMERIC(precision=15, scale=2), autoincrement=False, nullable=True),
    sa.Column('renewal_reason', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('esg_frameworks',
    sa.Column('framework_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('version', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('issuing_organization', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('focus_area', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('scoring_methodology', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('industry_applicability', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True),
    sa.Column('mandatory_disclosure', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('effective_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('content_templates',
    sa.Column('template_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('content_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('template_structure', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('personalization_rules', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('a_b_test_variants', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('performance_metrics', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('target_personas', postgresql.ARRAY(sa.INTEGER()), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('iot_data_streams',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('device_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('stream_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('sensor_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('processed_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('anomaly_detected', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('anomaly_details', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('location', sa.NullType(), autoincrement=False, nullable=True),
    sa.Column('timestamp', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('ingestion_timestamp', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['device_id'], ['iot_devices.id'], name='fk_iot_data_streams_device_id'),
    sa.PrimaryKeyConstraint('id', name='iot_data_streams_pkey')
    )
    op.create_table('member_audit_logs',
    sa.Column('member_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('action', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('performed_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('old_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('new_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False)
    )
    op.create_table('ticket_categories',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='ticket_categories_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('activity_log',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('activity', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='activity_log_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='activity_log_pkey')
    )
    op.create_index('idx_activity_log_user_created', 'activity_log', ['user_id', 'created_at'], unique=False)
    op.create_table('rating_factors',
    sa.Column('factor_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('factor_code', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('product_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('factor_type', sa.VARCHAR(length=30), autoincrement=False, nullable=True),
    sa.Column('data_type', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('min_value', sa.NUMERIC(precision=15, scale=4), autoincrement=False, nullable=True),
    sa.Column('max_value', sa.NUMERIC(precision=15, scale=4), autoincrement=False, nullable=True),
    sa.Column('default_value', sa.NUMERIC(precision=15, scale=4), autoincrement=False, nullable=True),
    sa.Column('relativities', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('is_mandatory', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('effective_from', sa.DATE(), server_default=sa.text('CURRENT_DATE'), autoincrement=False, nullable=True),
    sa.Column('effective_to', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('regulatory_filed', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('carbon_emissions_tracking',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('company_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('emission_source_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('measurement_period_start', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('measurement_period_end', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('activity_quantity', sa.NUMERIC(precision=15, scale=4), autoincrement=False, nullable=True),
    sa.Column('emission_factor_used', sa.NUMERIC(precision=10, scale=6), autoincrement=False, nullable=True),
    sa.Column('total_emissions_kgco2e', sa.NUMERIC(precision=15, scale=4), autoincrement=False, nullable=True),
    sa.Column('verification_status', sa.VARCHAR(length=30), autoincrement=False, nullable=True),
    sa.Column('offset_credits_applied', sa.NUMERIC(precision=15, scale=4), autoincrement=False, nullable=True),
    sa.Column('net_emissions', sa.NUMERIC(precision=15, scale=4), autoincrement=False, nullable=True),
    sa.Column('data_source', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('gdpr_consent_logs',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('consent_type', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('granted', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('granted_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True)
    )
    op.create_table('document_templates',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('template_type', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('design_version', sa.TEXT(), server_default=sa.text("'v1'::text"), autoincrement=False, nullable=True),
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('preview_image', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    comment='Templates for generating insurance documents and certificates'
    )
    op.create_table('system_flags',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('flag_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('flag_category', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('is_enabled', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('flag_value', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('company_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('environment', sa.VARCHAR(length=20), server_default=sa.text("'production'::character varying"), autoincrement=False, nullable=True),
    sa.Column('conditions', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('rollout_percentage', sa.NUMERIC(precision=5, scale=2), server_default=sa.text('100.00'), autoincrement=False, nullable=True),
    sa.Column('target_user_segments', postgresql.ARRAY(sa.VARCHAR(length=100)), autoincrement=False, nullable=True),
    sa.Column('created_date', sa.DATE(), server_default=sa.text('CURRENT_DATE'), autoincrement=False, nullable=True),
    sa.Column('enabled_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('disabled_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('scheduled_removal_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('usage_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('last_accessed_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('performance_impact_ms', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.CheckConstraint('rollout_percentage >= 0::numeric AND rollout_percentage <= 100::numeric', name='valid_rollout_percentage'),
    sa.ForeignKeyConstraint(['company_id'], ['companies.id'], name='system_flags_company_id_fkey'),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name='system_flags_created_by_fkey'),
    sa.ForeignKeyConstraint(['updated_by'], ['users.id'], name='system_flags_updated_by_fkey'),
    sa.PrimaryKeyConstraint('id', name='system_flags_pkey'),
    sa.UniqueConstraint('flag_name', name='system_flags_flag_name_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    comment='Feature flags and system configuration for operational control'
    )
    op.create_index('idx_system_flags_flag_name', 'system_flags', ['flag_name'], unique=False)
    op.create_index('idx_system_flags_enabled', 'system_flags', ['is_enabled'], unique=False, postgresql_where='(is_enabled = true)')
    op.create_index('idx_system_flags_company', 'system_flags', ['company_id'], unique=False)
    op.create_table('policy_benefit_overrides',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('policy_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('benefit_schedule_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('override_limit_amount', sa.NUMERIC(precision=15, scale=2), autoincrement=False, nullable=True),
    sa.Column('override_coinsurance_percent', sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=True),
    sa.Column('override_deductible_amount', sa.NUMERIC(precision=15, scale=2), autoincrement=False, nullable=True),
    sa.Column('override_copay_amount', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('override_preapproval_required', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('override_network_tier', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('effective_date', sa.DATE(), server_default=sa.text('CURRENT_DATE'), autoincrement=False, nullable=False),
    sa.Column('expiry_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('override_reason', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('approval_reference', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('approved_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.CheckConstraint('effective_date <= expiry_date OR expiry_date IS NULL', name='valid_date_range'),
    sa.CheckConstraint('override_coinsurance_percent IS NULL OR override_coinsurance_percent >= 0::numeric AND override_coinsurance_percent <= 100::numeric', name='valid_override_coinsurance'),
    sa.ForeignKeyConstraint(['benefit_schedule_id'], ['plan_benefit_schedules.id'], name='policy_benefit_overrides_benefit_schedule_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['policy_id'], ['policies.id'], name='policy_benefit_overrides_policy_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='policy_benefit_overrides_pkey'),
    comment='Policy-specific overrides to standard benefit schedules'
    )
    op.create_index('idx_policy_overrides_policy_benefit', 'policy_benefit_overrides', ['policy_id', 'benefit_schedule_id'], unique=False)
    op.create_table('provider_specialties',
    sa.Column('provider_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('specialty', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('regulatory_flags',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('entity_type', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('entity_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('flag_type', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('flag_value', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('effective_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('generated_documents',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('template_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('generated_for_type', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('generated_for_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('file_url', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('format', sa.TEXT(), server_default=sa.text("'pdf'::text"), autoincrement=False, nullable=True),
    sa.Column('generated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('generated_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('is_final', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_index('idx_generated_docs_target', 'generated_documents', ['generated_for_type', 'generated_for_id'], unique=False)
    op.create_table('payment_transactions',
    sa.Column('invoice_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('payment_method_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('transaction_id', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('amount', sa.NUMERIC(precision=15, scale=2), autoincrement=False, nullable=False),
    sa.Column('currency', sa.VARCHAR(length=3), server_default=sa.text("'USD'::character varying"), autoincrement=False, nullable=True),
    sa.Column('status', postgresql.ENUM('pending', 'processing', 'completed', 'failed', 'refunded', 'disputed', 'cancelled', name='payment_status'), server_default=sa.text("'pending'::payment_status"), autoincrement=False, nullable=True),
    sa.Column('gateway_response', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('processed_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('failure_reason', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('retry_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('ar_damage_assessments',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('claim_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('app_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('assessor_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('session_id', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('ar_session_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('captured_images', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('damage_measurements', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('repair_estimates', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('session_duration_minutes', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('accuracy_score', sa.NUMERIC(precision=3, scale=2), autoincrement=False, nullable=True),
    sa.Column('quality_rating', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('session_timestamp', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('quotations',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('quote_number', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('customer_name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('customer_email', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('customer_phone', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('channel', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('lead_source', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('assigned_to_user_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('follow_up_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('last_contacted_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('auto_expire_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('is_locked', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('converted_policy_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('ai_score', sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=True),
    sa.Column('risk_score', sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=True),
    sa.Column('summary_generated', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('summary_text', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('quote_bundle_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('tags', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=50), server_default=sa.text("'draft'::character varying"), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('customer_national_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('customer_date_of_birth', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('customer_address', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('campaign_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('referral_code', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('assigned_team_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('priority_level', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('policy_type_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('plan_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('product_code', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('base_premium', sa.NUMERIC(precision=12, scale=2), autoincrement=False, nullable=True),
    sa.Column('discount_amount', sa.NUMERIC(precision=12, scale=2), autoincrement=False, nullable=True),
    sa.Column('surcharge_amount', sa.NUMERIC(precision=12, scale=2), autoincrement=False, nullable=True),
    sa.Column('fees_amount', sa.NUMERIC(precision=12, scale=2), autoincrement=False, nullable=True),
    sa.Column('tax_amount', sa.NUMERIC(precision=12, scale=2), autoincrement=False, nullable=True),
    sa.Column('items_premium', sa.NUMERIC(precision=12, scale=2), autoincrement=False, nullable=True),
    sa.Column('total_premium', sa.NUMERIC(precision=12, scale=2), autoincrement=False, nullable=True),
    sa.Column('currency_code', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('valid_from', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('valid_to', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('quote_expires_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('submitted_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('approved_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('converted_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('lock_reason', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('locked_by', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('locked_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('parent_quotation_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('renewal_quotation_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('fraud_score', sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=True),
    sa.Column('priority_score', sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=True),
    sa.Column('terms_conditions', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('special_conditions', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('rejection_reason', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('cancellation_reason', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('external_ref_id', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('source_system', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('version', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('is_latest_version', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('reference_number', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('profile_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('final_premium', sa.NUMERIC(precision=15, scale=2), autoincrement=False, nullable=True),
    sa.Column('base_currency', sa.VARCHAR(length=3), server_default=sa.text("'USD'::character varying"), autoincrement=False, nullable=True),
    sa.Column('converted_premium', sa.NUMERIC(precision=15, scale=2), autoincrement=False, nullable=True),
    sa.Column('exchange_rate_used', sa.NUMERIC(precision=12, scale=6), autoincrement=False, nullable=True),
    sa.Column('group_size', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('customer_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('version_notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('assigned_to_user_id_uuid', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.CheckConstraint("currency_code::text ~ '^[A-Z]{3}$'::text", name='quotations_currency_code_check'),
    sa.CheckConstraint("status::text = ANY (ARRAY['DRAFT'::character varying::text, 'CALCULATED'::character varying::text, 'APPROVED'::character varying::text, 'REJECTED'::character varying::text, 'EXPIRED'::character varying::text, 'draft'::character varying::text, 'submitted'::character varying::text, 'approved'::character varying::text, 'converted'::character varying::text])", name='quotations_status_check')
    )
    op.create_index('idx_quotations_active_concurrent', 'quotations', ['status', 'created_at'], unique=False, postgresql_where="((status)::text = 'active'::text)")
    op.create_table('spatial_ref_sys',
    sa.Column('srid', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('auth_name', sa.VARCHAR(length=256), autoincrement=False, nullable=True),
    sa.Column('auth_srid', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('srtext', sa.VARCHAR(length=2048), autoincrement=False, nullable=True),
    sa.Column('proj4text', sa.VARCHAR(length=2048), autoincrement=False, nullable=True),
    sa.CheckConstraint('srid > 0 AND srid <= 998999', name='spatial_ref_sys_srid_check'),
    sa.PrimaryKeyConstraint('srid', name='spatial_ref_sys_pkey')
    )
    op.create_table('security_incidents',
    sa.Column('incident_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('severity', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('ip_address', postgresql.INET(), autoincrement=False, nullable=True),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('evidence', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=30), server_default=sa.text("'open'::character varying"), autoincrement=False, nullable=True),
    sa.Column('assigned_to', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('resolved_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('resolution_notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('user_id_uuid', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('policies',
    sa.Column('policy_number', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('member_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('plan_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('application_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('status', postgresql.ENUM('quoted', 'bound', 'active', 'lapsed', 'cancelled', 'non_renewed', 'suspended', 'pending', name='policy_status'), server_default=sa.text("'pending'::policy_status"), autoincrement=False, nullable=True),
    sa.Column('effective_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('expiry_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('premium_amount', sa.NUMERIC(precision=15, scale=2), autoincrement=False, nullable=True),
    sa.Column('total_sum_insured', sa.NUMERIC(precision=15, scale=2), autoincrement=False, nullable=True),
    sa.Column('currency', sa.VARCHAR(length=3), server_default=sa.text("'USD'::character varying"), autoincrement=False, nullable=True),
    sa.Column('payment_frequency', sa.VARCHAR(length=20), server_default=sa.text("'annual'::character varying"), autoincrement=False, nullable=True),
    sa.Column('agent_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('broker_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('underwriter_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('policy_terms', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('endorsements', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('policy_channel_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('product_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('entity_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('endorsement_number', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('auto_renew_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('document_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('tags', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('underwriter_notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('policy_type_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('is_renewable', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('group_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('company_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('deleted_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.CheckConstraint('effective_date <= expiry_date', name='chk_policies_date_logic'),
    sa.ForeignKeyConstraint(['company_id'], ['companies.id'], name='fk_policies_company_id', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['member_id'], ['members.id'], name='fk_policies_member_id', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['plan_id'], ['plans.id'], name='fk_policies_plan_id', ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('id', name='pk_policies'),
    postgresql_ignore_search_path=False
    )
    op.create_index('idx_policies_status_effective', 'policies', ['status', 'effective_date'], unique=False)
    op.create_index('idx_policies_plan_id', 'policies', ['plan_id'], unique=False)
    op.create_index('idx_policies_member_id', 'policies', ['member_id'], unique=False)
    op.create_index('idx_policies_active_status_concurrent', 'policies', ['status'], unique=False, postgresql_where="(status = 'active'::policy_status)")
    op.create_table('permissions',
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('resource', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('action', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('scope_department', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('scope_unit', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('scope_company', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('conditions', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('code', sa.VARCHAR(length=150), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='permissions_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ux_permissions_resource_action', 'permissions', ['resource', 'action'], unique=True)
    op.create_index('ux_permissions_code', 'permissions', ['code'], unique=True)
    op.create_table('simulation_validation',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('simulation_result_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('validation_period_start', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('validation_period_end', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('predicted_values', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('actual_values', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('accuracy_metrics', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('model_drift_indicators', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('calibration_adjustments_needed', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('validation_notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('validated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('validated_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['simulation_result_id'], ['simulation_results.id'], name='simulation_validation_simulation_result_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='simulation_validation_pkey')
    )
    op.create_table('underwriting_actions',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('profile_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('action_type', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('taken_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('taken_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.CheckConstraint("action_type = ANY (ARRAY['approve'::text, 'refer'::text, 'reject'::text, 'escalate'::text])", name='underwriting_actions_action_type_check')
    )
    op.create_table('age_brackets',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('bracket_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('min_age', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('max_age', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('base_rate', sa.NUMERIC(precision=15, scale=2), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('insurance_type', sa.VARCHAR(length=50), server_default=sa.text("'medical'::character varying"), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('effective_from', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('effective_to', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.CheckConstraint('max_age <= 120', name='age_brackets_max_age_check'),
    sa.CheckConstraint('min_age <= max_age', name='valid_age_range'),
    sa.CheckConstraint('min_age >= 0', name='age_brackets_min_age_check')
    )
    op.create_table('plan_exclusions',
    sa.Column('plan_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('plan_type', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('exclusion_text', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('cpt_code_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('icd10_code_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('motor_code_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('exclusion_text_ar', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.CheckConstraint("plan_type::text = ANY (ARRAY['medical'::character varying::text, 'motor'::character varying::text])", name='plan_exclusions_plan_type_check')
    )
    op.create_table('entity_types',
    sa.Column('company_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('code', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('label', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_default', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('quotation_pricing_profiles_history',
    sa.Column('history_id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('profile_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('operation', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('changed_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('changed_by', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('old_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('new_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.CheckConstraint("operation::text = ANY (ARRAY['INSERT'::character varying::text, 'UPDATE'::character varying::text, 'DELETE'::character varying::text])", name='quotation_pricing_profiles_history_operation_check')
    )
    op.create_table('auth_revoked_jti',
    sa.Column('jti', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('revoked_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('reason', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('jti', name='auth_revoked_jti_pkey')
    )
    op.create_table('ai_task_templates',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('template_name', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('task_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('prompt_template', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('model_parameters', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('expected_output_format', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('usage_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name='ai_task_templates_created_by_fkey'),
    sa.PrimaryKeyConstraint('id', name='ai_task_templates_pkey'),
    comment='Reusable AI task templates for automation workflows'
    )
    op.create_table('geographic_pricing_factors',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('zip_code', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('state', sa.VARCHAR(length=2), autoincrement=False, nullable=False),
    sa.Column('city', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('insurance_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('risk_factor', sa.NUMERIC(precision=5, scale=2), server_default=sa.text('1.0'), autoincrement=False, nullable=True),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('effective_from', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('effective_to', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('user_preferences_ai',
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('preference_category', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('preference_key', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('preference_value', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('confidence_score', sa.NUMERIC(precision=3, scale=2), autoincrement=False, nullable=True),
    sa.Column('learned_from', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('supporting_evidence', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('preference_stability', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('last_confirmed', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('business_impact', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('personalization_weight', sa.NUMERIC(precision=3, scale=2), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('user_id_uuid', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('event_outbox',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('event_type', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('aggregate_type', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('aggregate_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('payload', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('headers', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('occurred_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('published_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('error', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='event_outbox_pkey')
    )
    op.create_index('idx_event_outbox_unpublished', 'event_outbox', ['published_at'], unique=False, postgresql_where='(published_at IS NULL)')
    op.create_table('ai_utils',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='ai_utils_pkey'),
    sa.UniqueConstraint('name', name='ai_utils_name_key', postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('claim_history',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('customer_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('insurance_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('claim_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('claim_amount', sa.NUMERIC(precision=15, scale=2), autoincrement=False, nullable=False),
    sa.Column('claim_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), server_default=sa.text("'PENDING'::character varying"), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.CheckConstraint("status::text = ANY (ARRAY['PENDING'::character varying::text, 'APPROVED'::character varying::text, 'DENIED'::character varying::text, 'PAID'::character varying::text])", name='claim_history_status_check')
    )
    op.create_table('system_resilience_metrics',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('system_name', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('metric_date', sa.DATE(), server_default=sa.text('CURRENT_DATE'), autoincrement=False, nullable=True),
    sa.Column('availability_percentage', sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=True),
    sa.Column('mean_time_to_recovery_minutes', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('mean_time_between_failures_hours', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('error_rate_percentage', sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=True),
    sa.Column('response_time_percentiles', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('chaos_resilience_score', sa.NUMERIC(precision=3, scale=2), autoincrement=False, nullable=True),
    sa.Column('improvement_trend', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='system_resilience_metrics_pkey')
    )
    op.create_table('chat_contexts',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('session_id', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('context_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('context_summary', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('key_entities', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('sentiment_history', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('intent_progression', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('short_term_memory', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('long_term_memory', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('episodic_memory', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('communication_style', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('knowledge_level', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('interests_and_concerns', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('last_interaction', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('context_strength', sa.NUMERIC(precision=3, scale=2), autoincrement=False, nullable=True),
    sa.Column('decay_rate', sa.NUMERIC(precision=5, scale=4), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('user_id_uuid', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('quotation_versions',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('quotation_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('version_number', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('data_snapshot', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('is_latest_version', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('climate_risk_assessments',
    sa.Column('company_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('scenario_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('assessment_date', sa.DATE(), server_default=sa.text('CURRENT_DATE'), autoincrement=False, nullable=True),
    sa.Column('physical_risk_score', sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=True),
    sa.Column('transition_risk_score', sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=True),
    sa.Column('overall_climate_risk', sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=True),
    sa.Column('financial_impact_estimates', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('adaptation_strategies', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('stress_test_results', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('disclosure_requirements', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('quotation_documents',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('quotation_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('document_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('document_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('file_path', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('generated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('version', sa.INTEGER(), server_default=sa.text('1'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('universe_recommendations',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('universe_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('recommended_scenario_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('recommendation_rationale', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('risk_assessment', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('implementation_plan', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('success_probability', sa.NUMERIC(precision=3, scale=2), autoincrement=False, nullable=True),
    sa.Column('expected_roi', sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=True),
    sa.Column('implementation_timeline', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('contingency_plans', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('monitoring_kpis', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('decision_confidence', sa.NUMERIC(precision=3, scale=2), autoincrement=False, nullable=True),
    sa.Column('generated_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('reviewed_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('approved_for_implementation', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('approval_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['recommended_scenario_id'], ['parallel_scenarios.id'], name='universe_recommendations_recommended_scenario_id_fkey'),
    sa.ForeignKeyConstraint(['universe_id'], ['decision_universes.id'], name='universe_recommendations_universe_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='universe_recommendations_pkey')
    )
    op.create_table('accounting_audit_logs',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('entry_type', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('entry_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('action', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('old_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('new_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True)
    )
    op.create_table('member_benefit_utilization',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('member_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('policy_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('benefit_schedule_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('period_type', sa.VARCHAR(length=20), server_default=sa.text("'annual'::character varying"), autoincrement=False, nullable=False),
    sa.Column('period_start_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('period_end_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('utilized_amount', sa.NUMERIC(precision=15, scale=2), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('utilized_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('remaining_amount', sa.NUMERIC(precision=15, scale=2), autoincrement=False, nullable=True),
    sa.Column('remaining_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('last_utilized_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('is_exhausted', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['benefit_schedule_id'], ['plan_benefit_schedules.id'], name='member_benefit_utilization_benefit_schedule_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['member_id'], ['members.id'], name='member_benefit_utilization_member_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['policy_id'], ['policies.id'], name='member_benefit_utilization_policy_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='member_benefit_utilization_pkey'),
    sa.UniqueConstraint('member_id', 'policy_id', 'benefit_schedule_id', 'period_type', 'period_start_date', name='member_benefit_utilization_member_id_policy_id_benefit_sche_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    comment='Tracks how much of each benefit a member has used'
    )
    op.create_index('idx_member_utilization_member_policy', 'member_benefit_utilization', ['member_id', 'policy_id'], unique=False)
    op.create_table('fraud_detection_models',
    sa.Column('model_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('model_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('feature_set', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('model_weights', postgresql.BYTEA(), autoincrement=False, nullable=True),
    sa.Column('threshold_config', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('false_positive_rate', sa.NUMERIC(precision=8, scale=6), autoincrement=False, nullable=True),
    sa.Column('false_negative_rate', sa.NUMERIC(precision=8, scale=6), autoincrement=False, nullable=True),
    sa.Column('last_retrained', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('premium_calculations',
    sa.Column('policy_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('pricing_model_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('calculation_date', sa.DATE(), server_default=sa.text('CURRENT_DATE'), autoincrement=False, nullable=True),
    sa.Column('base_premium', sa.NUMERIC(precision=15, scale=2), autoincrement=False, nullable=True),
    sa.Column('risk_adjustments', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('final_premium', sa.NUMERIC(precision=15, scale=2), autoincrement=False, nullable=True),
    sa.Column('calculation_details', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('manual_override', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('override_reason', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('calculated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('approved_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('quotation_pricing_rules',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('insurance_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('rule_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('base_premium', sa.NUMERIC(precision=15, scale=2), autoincrement=False, nullable=True),
    sa.Column('min_premium', sa.NUMERIC(precision=15, scale=2), autoincrement=False, nullable=True),
    sa.Column('max_premium', sa.NUMERIC(precision=15, scale=2), autoincrement=False, nullable=True),
    sa.Column('currency_code', sa.VARCHAR(length=3), server_default=sa.text("'USD'::character varying"), autoincrement=False, nullable=True),
    sa.Column('applies_to', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('comparison_operator', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('value', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('adjustment_type', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('adjustment_value', sa.NUMERIC(precision=15, scale=4), autoincrement=False, nullable=True),
    sa.Column('formula_expression', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('formula_variables', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('effective_from', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('effective_to', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('priority', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('version', sa.INTEGER(), server_default=sa.text('1'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.CheckConstraint("adjustment_type::text = ANY (ARRAY['PERCENTAGE'::character varying::text, 'FIXED_AMOUNT'::character varying::text, 'MULTIPLIER'::character varying::text, 'FORMULA'::character varying::text])", name='quotation_pricing_rules_adjectment_type_check'),
    sa.CheckConstraint("comparison_operator::text = ANY (ARRAY['='::character varying::text, '!='::character varying::text, '>'::character varying::text, '>='::character varying::text, '<'::character varying::text, '<='::character varying::text, 'IN'::character varying::text, 'NOT IN'::character varying::text, 'BETWEEN'::character varying::text])", name='quotation_pricing_rules_comparison_operator_check'),
    sa.CheckConstraint("currency_code::text ~ '^[A-Z]{3}$'::text", name='quotation_pricing_rules_currency_code_check'),
    sa.CheckConstraint('effective_to IS NULL OR effective_from < effective_to', name='valid_effective_range')
    )
    op.create_table('treaty_reinstatements',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('agreement_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('reinstatement_number', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('trigger_event', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('trigger_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('reinstatement_premium', sa.NUMERIC(precision=15, scale=2), autoincrement=False, nullable=False),
    sa.Column('reinstatement_percentage', sa.NUMERIC(precision=8, scale=4), autoincrement=False, nullable=True),
    sa.Column('available_limit_before', sa.NUMERIC(precision=15, scale=2), autoincrement=False, nullable=True),
    sa.Column('available_limit_after', sa.NUMERIC(precision=15, scale=2), autoincrement=False, nullable=True),
    sa.Column('effective_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('expiry_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('terms_and_conditions', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('payment_status', sa.VARCHAR(length=20), server_default=sa.text("'pending'::character varying"), autoincrement=False, nullable=True),
    sa.Column('payment_due_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('paid_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('paid_amount', sa.NUMERIC(precision=15, scale=2), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['agreement_id'], ['reinsurance_agreements.id'], name='fk_treaty_reinstatements_agreement', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name='treaty_reinstatements_pkey'),
    comment='Treaty limit reinstatements after losses'
    )
    op.create_index('idx_treaty_reinstatements_agreement', 'treaty_reinstatements', ['agreement_id'], unique=False)
    op.create_table('ai_image_analysis',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('model_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('image_url', sa.VARCHAR(length=500), autoincrement=False, nullable=False),
    sa.Column('analysis_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('detected_objects', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('damage_assessment', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('confidence_score', sa.NUMERIC(precision=5, scale=4), autoincrement=False, nullable=True),
    sa.Column('processing_time_ms', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('human_verification_required', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('verified_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('market_impact_analysis',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('signal_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('analysis_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('impact_categories', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('quantified_impacts', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('probability_assessment', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('timeline_assessment', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('recommended_actions', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('urgency_level', sa.VARCHAR(length=20), server_default=sa.text("'normal'::character varying"), autoincrement=False, nullable=True),
    sa.Column('assigned_analyst', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('analysis_completed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('stakeholder_notifications', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['signal_id'], ['market_signals.id'], name='market_impact_analysis_signal_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='market_impact_analysis_pkey')
    )
    op.create_table('claim_action_logs',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('claim_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('action_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('action_description', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('previous_status', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('new_status', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('previous_amount', sa.NUMERIC(precision=15, scale=2), autoincrement=False, nullable=True),
    sa.Column('new_amount', sa.NUMERIC(precision=15, scale=2), autoincrement=False, nullable=True),
    sa.Column('amount_difference', sa.NUMERIC(precision=15, scale=2), autoincrement=False, nullable=True),
    sa.Column('supporting_documents', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('internal_notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('member_visible_notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('reason_code', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('requires_approval', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('approved_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('approval_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('approval_notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('triggered_by', sa.VARCHAR(length=50), server_default=sa.text("'manual'::character varying"), autoincrement=False, nullable=True),
    sa.Column('rule_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('confidence_score', sa.NUMERIC(precision=5, scale=4), autoincrement=False, nullable=True),
    sa.Column('action_taken_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('action_taken_by', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('ip_address', postgresql.INET(), autoincrement=False, nullable=True),
    sa.Column('user_agent', sa.TEXT(), autoincrement=False, nullable=True),
    sa.CheckConstraint("action_type::text = ANY (ARRAY['status_change'::character varying, 'amount_adjustment'::character varying, 'document_added'::character varying, 'note_added'::character varying, 'approval_granted'::character varying, 'approval_denied'::character varying, 'reassignment'::character varying, 'escalation'::character varying, 'fraud_flag_added'::character varying, 'fraud_flag_removed'::character varying, 'payment_processed'::character varying]::text[])", name='valid_action_type'),
    sa.ForeignKeyConstraint(['action_taken_by'], ['users.id'], name='claim_action_logs_action_taken_by_fkey'),
    sa.ForeignKeyConstraint(['approved_by'], ['users.id'], name='claim_action_logs_approved_by_fkey'),
    sa.ForeignKeyConstraint(['claim_id'], ['claims.id'], name='claim_action_logs_claim_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='claim_action_logs_pkey'),
    comment='Detailed audit trail of all claim processing actions'
    )
    op.create_index('idx_claim_action_logs_taken_at', 'claim_action_logs', [sa.text('action_taken_at DESC')], unique=False)
    op.create_index('idx_claim_action_logs_claim_id', 'claim_action_logs', ['claim_id'], unique=False)
    op.create_index('idx_claim_action_logs_action_type', 'claim_action_logs', ['action_type'], unique=False)
    op.create_table('iot_alerts',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('device_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('alert_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('severity', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('alert_message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('alert_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('triggered_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('acknowledged_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('acknowledged_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('resolved_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('action_taken', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['device_id'], ['iot_devices.id'], name='fk_iot_alerts_device', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='iot_alerts_pkey')
    )
    op.create_table('users',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('username', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('password_hash', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('first_name', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('last_name', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('full_name', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('phone', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('last_login', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('failed_login_attempts', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('account_locked_until', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('password_changed_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('must_change_password', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('role_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('profile_image_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('language', sa.VARCHAR(length=10), server_default=sa.text("'en'::character varying"), autoincrement=False, nullable=True),
    sa.Column('theme', sa.VARCHAR(length=20), server_default=sa.text("'light'::character varying"), autoincrement=False, nullable=True),
    sa.Column('company_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('role_id_uuid', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('user_type', sa.VARCHAR(length=20), server_default=sa.text("'user'::character varying"), autoincrement=False, nullable=True),
    sa.Column('department', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('unit', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('position', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('manager_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['company_id'], ['companies.id'], name='fk_users_company_id', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['manager_id'], ['users.id'], name='users_manager_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='pk_users'),
    postgresql_ignore_search_path=False
    )
    op.create_table('retention_forecasts',
    sa.Column('company_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('forecast_model', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('customer_segment_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('forecast_period_start', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('forecast_period_end', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('predicted_retention_rate', sa.NUMERIC(precision=5, scale=4), autoincrement=False, nullable=True),
    sa.Column('confidence_interval_lower', sa.NUMERIC(precision=5, scale=4), autoincrement=False, nullable=True),
    sa.Column('confidence_interval_upper', sa.NUMERIC(precision=5, scale=4), autoincrement=False, nullable=True),
    sa.Column('month_1_retention', sa.NUMERIC(precision=5, scale=4), autoincrement=False, nullable=True),
    sa.Column('month_3_retention', sa.NUMERIC(precision=5, scale=4), autoincrement=False, nullable=True),
    sa.Column('month_6_retention', sa.NUMERIC(precision=5, scale=4), autoincrement=False, nullable=True),
    sa.Column('month_12_retention', sa.NUMERIC(precision=5, scale=4), autoincrement=False, nullable=True),
    sa.Column('month_24_retention', sa.NUMERIC(precision=5, scale=4), autoincrement=False, nullable=True),
    sa.Column('expected_revenue_retained', sa.NUMERIC(precision=15, scale=2), autoincrement=False, nullable=True),
    sa.Column('expected_customers_retained', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('retention_improvement_opportunities', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('model_accuracy', sa.NUMERIC(precision=5, scale=4), autoincrement=False, nullable=True),
    sa.Column('historical_validation', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('feature_importance', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('forecast_generated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('valid_until', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('custom_field_values',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('custom_field_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('entity_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('value', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['custom_field_id'], ['custom_fields.id'], name='custom_field_values_custom_field_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='custom_field_values_pkey')
    )
    op.create_index('idx_custom_field_values_field', 'custom_field_values', ['custom_field_id'], unique=False)
    op.create_index('idx_custom_field_values_entity', 'custom_field_values', ['entity_id'], unique=False)
    op.create_table('language_keys',
    sa.Column('key_name', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('key_category', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('context', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('data_type', sa.VARCHAR(length=20), server_default=sa.text("'text'::character varying"), autoincrement=False, nullable=True),
    sa.Column('usage_count', sa.BIGINT(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('last_used', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('is_deprecated', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('replacement_key', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False)
    )
    op.create_table('customer_360_profiles',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('member_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('unified_profile', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('segment_ids', postgresql.ARRAY(sa.UUID()), autoincrement=False, nullable=True),
    sa.Column('lifetime_value', sa.NUMERIC(precision=15, scale=2), autoincrement=False, nullable=True),
    sa.Column('churn_score', sa.NUMERIC(precision=5, scale=4), autoincrement=False, nullable=True),
    sa.Column('next_best_action', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('last_interaction', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('preference_profile', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('risk_profile', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['member_id'], ['members.id'], name='customer_360_profiles_member_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='customer_360_profiles_pkey')
    )
    op.create_table('verifiable_credentials',
    sa.Column('credential_id', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('holder_did', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('issuer_did', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('credential_type', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('credential_subject', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('proof', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('issued_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('expires_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('revoked', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('revocation_registry', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('schema_id', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('quotation_workflow_logs',
    sa.Column('quotation_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('event', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False)
    )
    op.create_table('report_instances',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('template_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('report_name', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('generated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('generation_method', sa.VARCHAR(length=30), server_default=sa.text("'manual'::character varying"), autoincrement=False, nullable=True),
    sa.Column('parameters_used', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True),
    sa.Column('filters_applied', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True),
    sa.Column('data_snapshot_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('generation_status', sa.VARCHAR(length=30), server_default=sa.text("'generating'::character varying"), autoincrement=False, nullable=True),
    sa.Column('file_format', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('file_path', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('file_size_bytes', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('generation_time_seconds', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('download_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('expires_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('is_cached', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('cache_key', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('completed_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.CheckConstraint("file_format::text = ANY (ARRAY['pdf'::character varying, 'excel'::character varying, 'csv'::character varying, 'json'::character varying, 'html'::character varying, 'png'::character varying, 'jpg'::character varying]::text[])", name='report_instances_file_format_check'),
    sa.CheckConstraint("generation_method::text = ANY (ARRAY['manual'::character varying, 'scheduled'::character varying, 'api'::character varying, 'automated'::character varying]::text[])", name='report_instances_generation_method_check'),
    sa.CheckConstraint("generation_status::text = ANY (ARRAY['generating'::character varying, 'completed'::character varying, 'failed'::character varying, 'cancelled'::character varying]::text[])", name='report_instances_generation_status_check'),
    sa.ForeignKeyConstraint(['template_id'], ['report_templates.id'], name='report_instances_template_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='report_instances_pkey'),
    sa.UniqueConstraint('cache_key', name='report_instances_cache_key_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_index('idx_report_instances_template_id', 'report_instances', ['template_id'], unique=False)
    op.create_index('idx_report_instances_status', 'report_instances', ['generation_status'], unique=False)
    op.create_index('idx_report_instances_created_at', 'report_instances', ['created_at'], unique=False)
    op.create_table('skills_taxonomy',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('skill_name', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('skill_category', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('skill_subcategory', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('skill_description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('proficiency_levels', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('industry_relevance', sa.VARCHAR(length=20), server_default=sa.text("'high'::character varying"), autoincrement=False, nullable=True),
    sa.Column('technology_dependency', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('obsolescence_risk', sa.VARCHAR(length=20), server_default=sa.text("'low'::character varying"), autoincrement=False, nullable=True),
    sa.Column('learning_difficulty', sa.VARCHAR(length=20), server_default=sa.text("'medium'::character varying"), autoincrement=False, nullable=True),
    sa.Column('average_acquisition_time_months', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='skills_taxonomy_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('quotation_logs',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('quotation_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('status_from', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('status_to', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('actor_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True)
    )
    op.create_table('translations',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('entity_type', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('entity_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('language_code', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('field', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('translation', sa.TEXT(), autoincrement=False, nullable=False)
    )
    op.create_table('group_contacts',
    sa.Column('group_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('email', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('phone', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('role', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('provider_services',
    sa.Column('provider_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('service_tag', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('motor_cards',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('member_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('policy_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('company_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('plate_number', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('car_model', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('chassis_number', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('insurance_type', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('issued_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('expires_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('insured_value', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('driver_name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('license_number', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('license_expiry_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('color', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('year_of_manufacture', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('vehicle_make', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('qr_code_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('policy_number', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('underwriting_documents',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('profile_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('document_type', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('file_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('uploaded_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('uploaded_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('otp_requests',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('otp_code', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('sent_via', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('expires_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('is_used', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True)
    )
    op.create_table('webhook_events',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('event_type', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('event_source', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('event_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('event_version', sa.VARCHAR(length=20), server_default=sa.text("'1.0'::character varying"), autoincrement=False, nullable=True),
    sa.Column('event_timestamp', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('processing_status', sa.VARCHAR(length=30), server_default=sa.text("'pending'::character varying"), autoincrement=False, nullable=True),
    sa.Column('processing_attempts', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('max_retries', sa.INTEGER(), server_default=sa.text('3'), autoincrement=False, nullable=True),
    sa.Column('next_retry_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('webhook_deliverings', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('successful_deliveries', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('failed_deliveries', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('affects_entities', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('business_priority', sa.VARCHAR(length=20), server_default=sa.text("'normal'::character varying"), autoincrement=False, nullable=True),
    sa.Column('idempotency_key', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('duplicate_of', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True)
    )
    op.create_table('report_favorites',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('template_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('report_instance_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('favorite_type', sa.VARCHAR(length=20), server_default=sa.text("'template'::character varying"), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.CheckConstraint("favorite_type::text = ANY (ARRAY['template'::character varying, 'instance'::character varying]::text[])", name='report_favorites_favorite_type_check'),
    sa.ForeignKeyConstraint(['report_instance_id'], ['report_instances.id'], name='report_favorites_report_instance_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['template_id'], ['report_templates.id'], name='report_favorites_template_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='report_favorites_pkey')
    )
    op.create_table('ai_feature_usage',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('module', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('feature', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('triggered_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('customer_segments',
    sa.Column('segment_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('segment_description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('segmentation_criteria', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('segment_type', sa.VARCHAR(length=30), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('notification_queue',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('recipient_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('recipient_type', sa.VARCHAR(length=20), server_default=sa.text("'user'::character varying"), autoincrement=False, nullable=True),
    sa.Column('notification_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('channel', sa.VARCHAR(length=30), autoincrement=False, nullable=False),
    sa.Column('title', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('message', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('data', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True),
    sa.Column('priority', sa.VARCHAR(length=20), server_default=sa.text("'normal'::character varying"), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), server_default=sa.text("'pending'::character varying"), autoincrement=False, nullable=True),
    sa.Column('scheduled_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('sent_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('delivery_status', sa.VARCHAR(length=30), autoincrement=False, nullable=True),
    sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.CheckConstraint("channel::text = ANY (ARRAY['email'::character varying, 'sms'::character varying, 'push'::character varying, 'in-app'::character varying]::text[])", name='notification_queue_channel_check'),
    sa.CheckConstraint("priority::text = ANY (ARRAY['low'::character varying, 'normal'::character varying, 'high'::character varying, 'urgent'::character varying]::text[])", name='notification_queue_priority_check'),
    sa.CheckConstraint("status::text = ANY (ARRAY['pending'::character varying, 'sent'::character varying, 'failed'::character varying, 'cancelled'::character varying]::text[])", name='notification_queue_status_check'),
    sa.PrimaryKeyConstraint('id', name='notification_queue_pkey')
    )
    op.create_index('idx_notification_queue_recipient_status', 'notification_queue', ['recipient_id', 'status', 'scheduled_at'], unique=False)
    op.create_table('report_templates',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('query', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('template_name', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('template_category', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('template_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('template_description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('visual_layout', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('data_sources', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('sql_query', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('parameters', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('default_filters', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('permissions', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('is_public', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('is_prebuilt', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('usage_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='report_templates_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('idx_report_templates_visual_layout', 'report_templates', ['visual_layout'], unique=False, postgresql_using='gin')
    op.create_index('idx_report_templates_type', 'report_templates', ['template_type'], unique=False)
    op.create_index('idx_report_templates_data_sources', 'report_templates', ['data_sources'], unique=False, postgresql_using='gin')
    op.create_index('idx_report_templates_created_at', 'report_templates', ['created_at'], unique=False)
    op.create_index('idx_report_templates_category', 'report_templates', ['template_category'], unique=False)
    op.create_table('bi_widgets',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('dashboard_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('widget_name', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('widget_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('data_query', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('visualization_config', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('position_config', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('refresh_interval', sa.INTEGER(), server_default=sa.text('300'), autoincrement=False, nullable=True),
    sa.Column('cache_duration', sa.INTEGER(), server_default=sa.text('3600'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['dashboard_id'], ['bi_dashboards.id'], name='bi_widgets_dashboard_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='bi_widgets_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('system_settings',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('key', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('value', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('document_revisions',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('document_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('revision_number', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('version_label', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('change_description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('change_type', sa.VARCHAR(length=30), autoincrement=False, nullable=True),
    sa.Column('document_content', postgresql.BYTEA(), autoincrement=False, nullable=True),
    sa.Column('content_hash', sa.VARCHAR(length=64), autoincrement=False, nullable=True),
    sa.Column('file_size', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('mime_type', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('changes_from_previous', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('author_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('reviewer_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('approval_status', sa.VARCHAR(length=30), server_default=sa.text("'draft'::character varying"), autoincrement=False, nullable=True),
    sa.Column('approval_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('approval_notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('download_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('last_downloaded', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['document_id'], ['documents.id'], name='document_revisions_document_id_fkey', ondelete='CASCADE')
    )
    op.create_table('units',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('department_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('code', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['department_id'], ['departments.id'], name='units_department_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='units_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('user_roles_backup',
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('role_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('automation_workflows',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('workflow_name', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('workflow_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('process_steps', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('trigger_conditions', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('automation_level', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('success_rate', sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=True),
    sa.Column('time_saved_minutes', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='automation_workflows_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('cohort_definitions',
    sa.Column('cohort_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('cohort_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('definition_criteria', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('time_period', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('browser_fingerprints',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('fingerprint', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='browser_fingerprints_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='browser_fingerprints_pkey')
    )
    op.create_table('policy_lifecycle_stages',
    sa.Column('stage_name', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('stage_order', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('typical_duration_days', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('required_actions', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('next_possible_stages', postgresql.ARRAY(sa.INTEGER()), autoincrement=False, nullable=True),
    sa.Column('is_terminal', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('satellite_providers',
    sa.Column('provider_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('satellite_constellation', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('resolution_meters', sa.NUMERIC(precision=8, scale=4), autoincrement=False, nullable=True),
    sa.Column('revisit_frequency_days', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('spectral_bands', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('data_types', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('api_endpoint', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('pricing_model', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('coverage_area', sa.NullType(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('system_configuration',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('category', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('key', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('value', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_encrypted', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='system_configuration_pkey'),
    sa.UniqueConstraint('category', 'key', name='system_configuration_category_key_key', postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('underwriting_logs',
    sa.Column('application_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('action', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('performed_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('timestamp', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('log_type', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('log_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False)
    )
    op.create_table('knowledge_articles',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('category_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('title', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('language', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('is_published', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['category_id'], ['knowledge_categories.id'], name='knowledge_articles_category_id_fkey'),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name='knowledge_articles_created_by_fkey'),
    sa.PrimaryKeyConstraint('id', name='knowledge_articles_pkey')
    )
    op.create_table('customers',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('customer_code', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('first_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('last_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('phone', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('date_of_birth', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('address', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('national_id', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('cryptographic_algorithms',
    sa.Column('algorithm_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('algorithm_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('quantum_resistant', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('key_size_bits', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('security_level', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('performance_benchmark', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('standardization_status', sa.VARCHAR(length=30), autoincrement=False, nullable=True),
    sa.Column('implementation_library', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('is_approved', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('commission_statements',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('agent_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('period_start', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('period_end', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('total_commission', sa.NUMERIC(precision=12, scale=2), autoincrement=False, nullable=True),
    sa.Column('status', sa.TEXT(), server_default=sa.text("'pending'::text"), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('smart_contracts',
    sa.Column('contract_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('contract_address', sa.VARCHAR(length=42), autoincrement=False, nullable=True),
    sa.Column('network_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('contract_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('abi', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('bytecode', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('deployment_tx_hash', sa.VARCHAR(length=66), autoincrement=False, nullable=True),
    sa.Column('deployment_block_number', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('gas_used', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('deployment_cost', sa.NUMERIC(precision=18, scale=8), autoincrement=False, nullable=True),
    sa.Column('is_verified', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('deployed_by', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('deployed_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('login_attempts',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('username', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('ip_address', postgresql.INET(), autoincrement=False, nullable=True),
    sa.Column('user_agent', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('attempt_result', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('failure_reason', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('location_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('device_fingerprint', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('session_id', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('attempted_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('user_id_uuid', sa.UUID(), autoincrement=False, nullable=True)
    )
    op.create_table('external_services',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('system_type', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('base_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('api_version', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('auth_type', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('credentials', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='external_services_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('premium_services',
    sa.Column('pricing_profile_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('service_type', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('base_rate', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('market_data_sources',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('source_name', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('source_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('api_endpoint', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('authentication_config', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('data_extraction_rules', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('update_frequency', sa.VARCHAR(length=20), server_default=sa.text("'hourly'::character varying"), autoincrement=False, nullable=True),
    sa.Column('reliability_score', sa.NUMERIC(precision=3, scale=2), server_default=sa.text('0.8'), autoincrement=False, nullable=True),
    sa.Column('cost_per_api_call', sa.NUMERIC(precision=8, scale=4), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='market_data_sources_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('ai_ocr_results',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('task_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('extracted_text', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('confidence_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['task_id'], ['ai_tasks.id'], name='ai_ocr_results_task_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='ai_ocr_results_pkey')
    )
    op.create_table('plans',
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('plan_type', sa.VARCHAR(length=30), autoincrement=False, nullable=True),
    sa.Column('company_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('product_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('premium_amount', sa.NUMERIC(precision=15, scale=2), autoincrement=False, nullable=True),
    sa.Column('currency', sa.VARCHAR(length=3), server_default=sa.text("'USD'::character varying"), autoincrement=False, nullable=True),
    sa.Column('coverage_period_months', sa.INTEGER(), server_default=sa.text('12'), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('version', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('start_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('end_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('is_default', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('visibility', sa.VARCHAR(length=20), server_default=sa.text("'public'::character varying"), autoincrement=False, nullable=True),
    sa.Column('tags', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True),
    sa.Column('approval_required', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['company_id'], ['companies.id'], name='fk_plans_company_id', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='pk_plans'),
    postgresql_ignore_search_path=False
    )
    op.create_table('layer',
    sa.Column('topology_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('layer_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('schema_name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('table_name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('feature_column', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('feature_type', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('level', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('child_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['topology_id'], ['topology.id'], name='layer_topology_id_fkey'),
    sa.PrimaryKeyConstraint('topology_id', 'layer_id', name='layer_pkey'),
    sa.UniqueConstraint('schema_name', 'table_name', 'feature_column', name='layer_schema_name_table_name_feature_column_key', postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('telematics_data',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('device_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('trip_start', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('trip_end', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('distance_km', sa.NUMERIC(precision=8, scale=2), autoincrement=False, nullable=True),
    sa.Column('max_speed_kmh', sa.NUMERIC(precision=5, scale=1), autoincrement=False, nullable=True),
    sa.Column('harsh_braking_events', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('rapid_acceleration_events', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('night_driving_minutes', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('safety_score', sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['device_id'], ['iot_devices.id'], name='telematics_data_device_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='telematics_data_pkey')
    )
    op.create_table('data_exports',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('report_name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('exported_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('exported_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('format', sa.TEXT(), server_default=sa.text("'xlsx'::text"), autoincrement=False, nullable=True),
    sa.Column('filters', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('external_data_sources',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('source_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('source_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('endpoint_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('api_key_encrypted', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('last_sync', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('sync_status', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('uuid_conversion_log',
    sa.Column('table_name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('phase', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('status', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('rows_affected', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('started_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('completed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('execution_time_ms', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False)
    )
    op.create_table('agent_commissions',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('quotation_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('agent_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('commission_rate', sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=False),
    sa.Column('commission_amount', sa.NUMERIC(precision=15, scale=2), autoincrement=False, nullable=False),
    sa.Column('payment_status', sa.VARCHAR(length=20), server_default=sa.text("'PENDING'::character varying"), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('endorsements',
    sa.Column('policy_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('endorsement_number', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('effective_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('details', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('document_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('member_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), server_default=sa.text("'pending'::character varying"), autoincrement=False, nullable=True),
    sa.Column('reason', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('previous_value', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('new_value', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('approved_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('approved_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('campaign_performance',
    sa.Column('campaign_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('reporting_date', sa.DATE(), server_default=sa.text('CURRENT_DATE'), autoincrement=False, nullable=True),
    sa.Column('impressions', sa.BIGINT(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('reach', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('frequency', sa.NUMERIC(precision=4, scale=2), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('clicks', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('click_through_rate', sa.NUMERIC(precision=6, scale=4), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('opens', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('open_rate', sa.NUMERIC(precision=6, scale=4), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('conversions', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('conversion_rate', sa.NUMERIC(precision=6, scale=4), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('revenue', sa.NUMERIC(precision=15, scale=2), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('cost_per_conversion', sa.NUMERIC(precision=15, scale=2), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('return_on_ad_spend', sa.NUMERIC(precision=8, scale=4), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('new_customers_acquired', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('customers_retained', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('customer_lifetime_value_impact', sa.NUMERIC(precision=15, scale=2), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('policy_flags',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('policy_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('flag_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('flag_value', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('flag_severity', sa.VARCHAR(length=20), server_default=sa.text("'info'::character varying"), autoincrement=False, nullable=True),
    sa.Column('flag_reason', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('flag_description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('reference_number', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('effective_date', sa.DATE(), server_default=sa.text('CURRENT_DATE'), autoincrement=False, nullable=True),
    sa.Column('expiry_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('auto_expire', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('blocks_renewals', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('blocks_endorsements', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('blocks_claims', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('blocks_cancellations', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('requires_manager_approval', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('is_resolved', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('resolved_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('resolved_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('resolution_notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.CheckConstraint("flag_severity::text = ANY (ARRAY['info'::character varying, 'warning'::character varying, 'critical'::character varying, 'blocker'::character varying]::text[])", name='valid_severity'),
    sa.CheckConstraint("flag_type::text = ANY (ARRAY['compliance_review'::character varying, 'fraud_investigation'::character varying, 'payment_default'::character varying, 'high_risk'::character varying, 'regulatory_hold'::character varying, 'manual_review_required'::character varying, 'data_quality_issue'::character varying, 'subsidized_policy'::character varying, 'vip_member'::character varying, 'corporate_special_terms'::character varying, 'reinsurance_notification'::character varying]::text[])", name='valid_flag_type'),
    sa.CheckConstraint('expiry_date IS NULL OR expiry_date >= effective_date', name='valid_dates'),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name='policy_flags_created_by_fkey'),
    sa.ForeignKeyConstraint(['policy_id'], ['policies.id'], name='policy_flags_policy_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['resolved_by'], ['users.id'], name='policy_flags_resolved_by_fkey'),
    sa.ForeignKeyConstraint(['updated_by'], ['users.id'], name='policy_flags_updated_by_fkey'),
    sa.PrimaryKeyConstraint('id', name='policy_flags_pkey'),
    comment='Special compliance and operational flags on policies'
    )
    op.create_index('idx_policy_flags_type', 'policy_flags', ['flag_type'], unique=False)
    op.create_index('idx_policy_flags_severity', 'policy_flags', ['flag_severity'], unique=False)
    op.create_index('idx_policy_flags_policy_id', 'policy_flags', ['policy_id'], unique=False)
    op.create_index('idx_policy_flags_active', 'policy_flags', ['is_active'], unique=False, postgresql_where='(is_active = true)')
    op.create_table('product_features',
    sa.Column('product_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('feature_name', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('feature_type', sa.VARCHAR(length=30), autoincrement=False, nullable=True),
    sa.Column('feature_description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('feature_config', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('is_optional', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('additional_premium', sa.NUMERIC(precision=15, scale=2), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('eligibility_criteria', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('churn_predictions',
    sa.Column('member_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('prediction_date', sa.DATE(), server_default=sa.text('CURRENT_DATE'), autoincrement=False, nullable=True),
    sa.Column('churn_probability', sa.NUMERIC(precision=5, scale=4), autoincrement=False, nullable=True),
    sa.Column('risk_level', postgresql.ENUM('very_low', 'low', 'medium', 'high', 'very_high', 'critical', name='risk_level'), autoincrement=False, nullable=True),
    sa.Column('contributing_factors', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('recommended_actions', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('model_version', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('prediction_horizon_days', sa.INTEGER(), server_default=sa.text('90'), autoincrement=False, nullable=True),
    sa.Column('confidence_score', sa.NUMERIC(precision=3, scale=2), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('reinsurance_claims',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('claim_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('agreement_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('ceded_amount', sa.NUMERIC(precision=12, scale=2), autoincrement=False, nullable=True),
    sa.Column('retained_amount', sa.NUMERIC(precision=12, scale=2), autoincrement=False, nullable=True),
    sa.Column('paid_by_reinsurer', sa.NUMERIC(precision=12, scale=2), autoincrement=False, nullable=True),
    sa.Column('recovery_status', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.CheckConstraint("recovery_status = ANY (ARRAY['pending'::text, 'recovered'::text, 'partial'::text, 'denied'::text])", name='reinsurance_claims_recovery_status_check')
    )
    op.create_table('template_categories',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('risk_factors',
    sa.Column('factor_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('factor_category', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('data_type', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('calculation_method', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('weight', sa.NUMERIC(), server_default=sa.text('1.0'), autoincrement=False, nullable=True),
    sa.Column('min_value', sa.NUMERIC(precision=15, scale=4), autoincrement=False, nullable=True),
    sa.Column('max_value', sa.NUMERIC(precision=15, scale=4), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('impact_score', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('factor_type', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('applies_to', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('journal_entry_lines',
    sa.Column('journal_entry_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('line_number', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('account_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('debit_amount', sa.NUMERIC(precision=15, scale=2), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('credit_amount', sa.NUMERIC(precision=15, scale=2), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('cost_center', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('department', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('project_code', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('mfa_sessions',
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('session_token', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('method_used', sa.VARCHAR(length=30), autoincrement=False, nullable=True),
    sa.Column('device_fingerprint', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('ip_address', postgresql.INET(), autoincrement=False, nullable=True),
    sa.Column('expires_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('verified_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('user_id_uuid', sa.UUID(), autoincrement=False, nullable=True)
    )
    op.create_table('business_intelligence',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('analysis_name', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('analysis_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('analysis_period_start', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('analysis_period_end', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('data_sources', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('key_metrics', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('insights', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('recommendations', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('analysis_status', sa.VARCHAR(length=30), server_default=sa.text("'completed'::character varying"), autoincrement=False, nullable=True),
    sa.Column('analysis_method', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('confidence_score', sa.NUMERIC(precision=3, scale=2), autoincrement=False, nullable=True),
    sa.Column('business_impact_score', sa.NUMERIC(precision=3, scale=2), autoincrement=False, nullable=True),
    sa.Column('stakeholders', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('refresh_frequency', sa.VARCHAR(length=20), server_default=sa.text("'monthly'::character varying"), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('real_time_metrics', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True, comment='Real-time KPIs and metrics configurations for live dashboards'),
    sa.Column('dashboard_subscriptions', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True, comment='User subscriptions and notification preferences for dashboard updates'),
    sa.Column('alert_configurations', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True, comment='Threshold-based alert configurations for business metrics'),
    sa.PrimaryKeyConstraint('id', name='business_intelligence_pkey'),
    comment='Business intelligence and analytics data storage with intelligent module support'
    )
    op.create_index('idx_business_intelligence_real_time_metrics', 'business_intelligence', ['real_time_metrics'], unique=False, postgresql_using='gin')
    op.create_index('idx_business_intelligence_key_metrics', 'business_intelligence', ['key_metrics'], unique=False, postgresql_using='gin')
    op.create_index('idx_business_intelligence_is_active', 'business_intelligence', ['is_active'], unique=False)
    op.create_index('idx_business_intelligence_insights', 'business_intelligence', ['insights'], unique=False, postgresql_using='gin')
    op.create_index('idx_business_intelligence_dashboard_subscriptions', 'business_intelligence', ['dashboard_subscriptions'], unique=False, postgresql_using='gin')
    op.create_index('idx_business_intelligence_created_at', 'business_intelligence', ['created_at'], unique=False)
    op.create_index('idx_business_intelligence_analysis_type', 'business_intelligence', ['analysis_type'], unique=False)
    op.create_index('idx_business_intelligence_alert_configurations', 'business_intelligence', ['alert_configurations'], unique=False, postgresql_using='gin')
    op.create_table('quotation_attachments',
    sa.Column('quotation_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('file_name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('file_url', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('file_type', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('uploaded_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('uploaded_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('serendipity_discoveries',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('pattern_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('discovery_title', sa.VARCHAR(length=300), autoincrement=False, nullable=True),
    sa.Column('discovery_description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('discovery_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('significance_score', sa.NUMERIC(precision=5, scale=4), autoincrement=False, nullable=True),
    sa.Column('confidence_level', sa.NUMERIC(precision=3, scale=2), autoincrement=False, nullable=True),
    sa.Column('supporting_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('affected_entities', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('potential_value_estimate', sa.NUMERIC(precision=15, scale=2), autoincrement=False, nullable=True),
    sa.Column('actionability_score', sa.NUMERIC(precision=3, scale=2), autoincrement=False, nullable=True),
    sa.Column('discovery_date', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('validation_status', sa.VARCHAR(length=30), server_default=sa.text("'pending'::character varying"), autoincrement=False, nullable=True),
    sa.Column('validated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('validated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('business_impact_actual', sa.NUMERIC(precision=15, scale=2), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['pattern_id'], ['serendipity_patterns.id'], name='serendipity_discoveries_pattern_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='serendipity_discoveries_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('premium_industries',
    sa.Column('industry_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('load_factor', sa.NUMERIC(precision=5, scale=3), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('bot_executions',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('workflow_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('execution_start', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('execution_end', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('records_processed', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('errors_encountered', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['workflow_id'], ['automation_workflows.id'], name='bot_executions_workflow_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='bot_executions_pkey')
    )
    op.create_table('user_passwords',
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('password_hash', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('expires_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('is_current', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('user_id_uuid', sa.UUID(), autoincrement=False, nullable=True)
    )
    op.create_table('members',
    sa.Column('member_number', sa.VARCHAR(length=30), autoincrement=False, nullable=True),
    sa.Column('first_name', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('last_name', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('date_of_birth', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('gender', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('email', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('phone', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('address', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('city', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('state', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('country', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('postal_code', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('company_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('group_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('geom', sa.NullType(), autoincrement=False, nullable=True),
    sa.Column('full_name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('password_hash', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('last_login_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('login_method', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('national_id_number', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('insurance_id_card_number', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('preferred_language', sa.VARCHAR(length=10), server_default=sa.text("'en'::character varying"), autoincrement=False, nullable=True),
    sa.Column('dependents_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('full_name_ar', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('address_ar', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('city_ar', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('state_ar', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('country_ar', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('source_channel', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('referred_by', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('is_test_account', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('last_password_change_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('password_reset_token', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('reset_token_expires_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('two_fa_enabled', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('nationality', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('deleted_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.CheckConstraint("email::text ~* '^[A-Za-z0-9._%%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}$'::text", name='chk_members_email_format'),
    sa.ForeignKeyConstraint(['company_id'], ['companies.id'], name='fk_members_company_id', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['group_id'], ['groups.id'], name='fk_members_group_id', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name='pk_members'),
    postgresql_ignore_search_path=False
    )
    op.create_index('idx_members_search_concurrent', 'members', [sa.text("to_tsvector('english'::regconfig, (((COALESCE(full_name, ''::character varying)::text || ' '::text) || COALESCE(email, ''::character varying)::text) || ' '::text) || COALESCE(phone, ''::character varying)::text)")], unique=False, postgresql_using='gin')
    op.create_index('idx_members_name_search', 'members', [sa.text("to_tsvector('english'::regconfig, (first_name::text || ' '::text) || last_name::text)")], unique=False, postgresql_using='gin')
    op.create_index('idx_members_company_id', 'members', ['company_id'], unique=False)
    op.create_index('idx_members_company_active_concurrent', 'members', ['company_id', 'is_active'], unique=False, postgresql_where='(is_active = true)')
    op.create_index('idx_members_active_company', 'members', ['is_active', 'company_id'], unique=False, postgresql_where='(is_active = true)')
    op.create_table('health_metrics',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('wearable_device_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('metric_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('metric_value', sa.NUMERIC(precision=10, scale=4), autoincrement=False, nullable=True),
    sa.Column('unit_of_measure', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('quality_score', sa.NUMERIC(precision=3, scale=2), autoincrement=False, nullable=True),
    sa.Column('contextual_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('anomaly_detected', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('health_insights', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('recorded_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('synced_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('premium_copay',
    sa.Column('pricing_profile_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('service_type', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('copay_percent', sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=False),
    sa.Column('copay_cap', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('serendipity_recommendations',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('discovery_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('recommendation_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('recommendation_title', sa.VARCHAR(length=300), autoincrement=False, nullable=True),
    sa.Column('recommendation_description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('priority', sa.VARCHAR(length=20), server_default=sa.text("'medium'::character varying"), autoincrement=False, nullable=True),
    sa.Column('estimated_effort', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('estimated_roi', sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=True),
    sa.Column('implementation_complexity', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('target_deadline', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('assigned_to', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=30), server_default=sa.text("'proposed'::character varying"), autoincrement=False, nullable=True),
    sa.Column('implementation_notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('results_metrics', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['discovery_id'], ['serendipity_discoveries.id'], name='serendipity_recommendations_discovery_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='serendipity_recommendations_pkey')
    )
    op.create_table('premium_settings',
    sa.Column('smoker_multiplier', sa.NUMERIC(precision=5, scale=3), server_default=sa.text('0.5'), autoincrement=False, nullable=True),
    sa.Column('max_group_discount', sa.NUMERIC(precision=5, scale=3), server_default=sa.text('0.3'), autoincrement=False, nullable=True),
    sa.Column('min_premium', sa.NUMERIC(precision=10, scale=2), server_default=sa.text('100.00'), autoincrement=False, nullable=True),
    sa.Column('rounding_precision', sa.INTEGER(), server_default=sa.text('2'), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('key', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('value', sa.VARCHAR(length=500), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('role_permissions',
    sa.Column('role_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('permission_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('role_id_uuid', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['permission_id'], ['permissions.id'], name='fk_role_permissions_permission_id', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['permission_id'], ['permissions.id'], name='role_permissions_permission_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['role_id'], ['roles.id'], name='fk_role_permissions_role_id', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['role_id'], ['roles.id'], name='role_permissions_role_id_fkey', ondelete='CASCADE'),
    sa.UniqueConstraint('role_id', 'permission_id', name='ux_role_permissions_role_permission', postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index('ux_role_permissions_unique', 'role_permissions', ['role_id', 'permission_id'], unique=True)
    op.create_index('ux_role_permissions_role_perm', 'role_permissions', ['role_id', 'permission_id'], unique=True)
    op.create_table('mfa_methods',
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('method_type', sa.VARCHAR(length=30), autoincrement=False, nullable=True),
    sa.Column('method_config', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('is_primary', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('backup_codes', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True),
    sa.Column('verified_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('user_id_uuid', sa.UUID(), autoincrement=False, nullable=True)
    )
    op.create_table('member_benefit_usage',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('member_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('policy_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('plan_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('coverage_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('benefit_type', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('period_type', sa.VARCHAR(length=20), server_default=sa.text("'annual'::character varying"), autoincrement=False, nullable=True),
    sa.Column('period_start_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('period_end_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('benefit_limit', sa.NUMERIC(precision=15, scale=2), autoincrement=False, nullable=False),
    sa.Column('used_amount', sa.NUMERIC(precision=15, scale=2), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('remaining_amount', sa.NUMERIC(precision=15, scale=2), autoincrement=False, nullable=False),
    sa.Column('benefit_count_limit', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('used_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('remaining_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('utilization_percentage', sa.NUMERIC(precision=5, scale=2), sa.Computed('\nCASE\n    WHEN (benefit_limit > (0)::numeric) THEN ((used_amount / benefit_limit) * (100)::numeric)\n    ELSE (0)::numeric\nEND', persisted=True), autoincrement=False, nullable=True),
    sa.Column('alert_sent_at_80_percent', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('alert_sent_at_90_percent', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('is_exhausted', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('exhausted_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('last_used_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('last_claim_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.CheckConstraint('used_amount >= 0::numeric AND remaining_amount >= 0::numeric', name='valid_amounts'),
    sa.CheckConstraint('used_count >= 0 AND (remaining_count IS NULL OR remaining_count >= 0)', name='valid_counts'),
    sa.ForeignKeyConstraint(['coverage_id'], ['coverages.id'], name='member_benefit_usage_coverage_id_fkey', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['last_claim_id'], ['claims.id'], name='member_benefit_usage_last_claim_id_fkey'),
    sa.ForeignKeyConstraint(['member_id'], ['members.id'], name='member_benefit_usage_member_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['plan_id'], ['plans.id'], name='member_benefit_usage_plan_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['policy_id'], ['policies.id'], name='member_benefit_usage_policy_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='member_benefit_usage_pkey'),
    sa.UniqueConstraint('member_id', 'policy_id', 'benefit_type', 'period_start_date', 'period_type', name='unique_member_benefit_period', postgresql_include=[], postgresql_nulls_not_distinct=False),
    comment='Real-time tracking of member benefit utilization against limits',
    postgresql_ignore_search_path=False
    )
    op.create_index('idx_member_benefit_usage_utilization', 'member_benefit_usage', [sa.text('utilization_percentage DESC')], unique=False)
    op.create_index('idx_member_benefit_usage_member_policy', 'member_benefit_usage', ['member_id', 'policy_id'], unique=False)
    op.create_index('idx_member_benefit_usage_exhausted', 'member_benefit_usage', ['is_exhausted'], unique=False, postgresql_where='(is_exhausted = true)')
    op.create_index('idx_member_benefit_usage_benefit_type', 'member_benefit_usage', ['benefit_type'], unique=False)
    op.create_table('discounts_promotions',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('discount_type', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('discount_value', sa.NUMERIC(precision=10, scale=4), autoincrement=False, nullable=False),
    sa.Column('insurance_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('applicable_to', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('min_premium', sa.NUMERIC(precision=15, scale=2), autoincrement=False, nullable=True),
    sa.Column('max_discount', sa.NUMERIC(precision=15, scale=2), autoincrement=False, nullable=True),
    sa.Column('start_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('end_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.CheckConstraint("discount_type::text = ANY (ARRAY['PERCENTAGE'::character varying::text, 'FIXED_AMOUNT'::character varying::text, 'MULTIPLIER'::character varying::text])", name='discounts_promotions_discount_type_check')
    )
    op.create_table('garage_estimate_items',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('estimate_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('line_no', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('item_type', postgresql.ENUM('labor', 'part', 'paint', 'towing', 'misc', name='garage_item_type'), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('qty', sa.NUMERIC(precision=12, scale=3), server_default=sa.text('1'), autoincrement=False, nullable=False),
    sa.Column('unit_cost', sa.NUMERIC(precision=15, scale=2), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('hours', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('rate', sa.NUMERIC(precision=15, scale=2), autoincrement=False, nullable=True),
    sa.Column('line_total', sa.NUMERIC(precision=15, scale=2), sa.Computed('COALESCE((hours * rate), (qty * unit_cost))', persisted=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['estimate_id'], ['garage_estimates.id'], name='gest_items_estimate_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='garage_estimate_items_pkey')
    )
    op.create_index('ux_gest_items_estimate_line', 'garage_estimate_items', ['estimate_id', 'line_no'], unique=True)
    op.create_index('idx_gest_items_estimate', 'garage_estimate_items', ['estimate_id'], unique=False)
    op.create_table('premium_deductibles',
    sa.Column('deductible_amount', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('factor', sa.NUMERIC(precision=5, scale=3), autoincrement=False, nullable=False),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('motor_exclusion_codes',
    sa.Column('code', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('title', sa.VARCHAR(length=150), autoincrement=False, nullable=False),
    sa.Column('category_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('carbon_emission_sources',
    sa.Column('source_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('emission_scope', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('category', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('calculation_methodology', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('emission_factor', sa.NUMERIC(precision=10, scale=6), autoincrement=False, nullable=True),
    sa.Column('unit_of_measure', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('data_quality_rating', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('update_frequency', sa.VARCHAR(length=30), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('premium_deductible',
    sa.Column('uuid', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=True),
    sa.Column('pricing_profile_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('service_type', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('amount', sa.NUMERIC(precision=12, scale=2), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.CheckConstraint('amount >= 0::numeric', name='premium_deductible_amount_check')
    )
    op.create_table('dependents',
    sa.Column('member_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('full_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('full_name_ar', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('gender', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('date_of_birth', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('relation', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('national_id_number', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('insurance_id_card_number', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('photo_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('has_card', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('coverage_level', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('coverage_limit', sa.NUMERIC(precision=12, scale=2), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=50), server_default=sa.text("'active'::character varying"), autoincrement=False, nullable=True),
    sa.Column('address', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('address_ar', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('is_test_account', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('document_entity_links',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('document_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('entity_type', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('entity_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('relation', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.CheckConstraint('length(entity_type) > 0', name='document_entity_links_entity_type_check'),
    sa.ForeignKeyConstraint(['document_id'], ['documents.id'], name='document_entity_links_document_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='document_entity_links_pkey'),
    sa.UniqueConstraint('document_id', 'entity_type', 'entity_id', name='document_entity_links_document_id_entity_type_entity_id_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    comment='N:M between a document and any business entity (member, company, group, policy, contract, claim, etc.).'
    )
    op.create_index('idx_del_entity', 'document_entity_links', ['entity_type', 'entity_id'], unique=False)
    op.create_index('idx_del_document', 'document_entity_links', ['document_id'], unique=False)
    op.create_table('garage_estimate_actions',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('estimate_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('action', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('note', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('performed_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('performed_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.CheckConstraint("action = ANY (ARRAY['submitted'::text, 'needs_info'::text, 'approved'::text, 'rejected'::text, 'revised'::text])", name='garage_estimate_actions_action_check'),
    sa.ForeignKeyConstraint(['estimate_id'], ['garage_estimates.id'], name='gest_actions_estimate_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['performed_by'], ['users.id'], name='gest_actions_performed_by_fkey', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name='garage_estimate_actions_pkey')
    )
    op.create_index('idx_gest_actions_estimate', 'garage_estimate_actions', ['estimate_id'], unique=False)
    op.create_table('compliance_monitoring',
    sa.Column('company_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('requirement_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('monitoring_date', sa.DATE(), server_default=sa.text('CURRENT_DATE'), autoincrement=False, nullable=True),
    sa.Column('current_value', sa.NUMERIC(precision=15, scale=4), autoincrement=False, nullable=True),
    sa.Column('threshold_value', sa.NUMERIC(precision=15, scale=4), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=30), autoincrement=False, nullable=True),
    sa.Column('variance_percentage', sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=True),
    sa.Column('remediation_plan', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('target_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('responsible_person', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('plan_benefit_schedules',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('plan_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('coverage_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('category_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('benefit_name', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('benefit_description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('benefit_code', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('limit_amount', sa.NUMERIC(precision=15, scale=2), autoincrement=False, nullable=True),
    sa.Column('coinsurance_percent', sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=True),
    sa.Column('deductible_amount', sa.NUMERIC(precision=15, scale=2), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('copay_amount', sa.NUMERIC(precision=10, scale=2), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('requires_preapproval', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('is_optional', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('network_tier', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('display_group', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('display_order', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('disclaimer', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('alert_threshold_percent', sa.NUMERIC(precision=5, scale=2), server_default=sa.text('80.0'), autoincrement=False, nullable=True),
    sa.Column('frequency_limit', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('waiting_period_days', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('ai_summary', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.CheckConstraint('coinsurance_percent >= 0::numeric AND coinsurance_percent <= 100::numeric', name='plan_benefit_schedules_coinsurance_percent_check'),
    sa.CheckConstraint('deductible_amount >= 0::numeric', name='valid_deductible'),
    sa.CheckConstraint('limit_amount IS NULL OR limit_amount >= 0::numeric', name='valid_limit_amount'),
    sa.ForeignKeyConstraint(['category_id'], ['benefit_categories.id'], name='plan_benefit_schedules_category_id_fkey', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['coverage_id'], ['coverages.id'], name='plan_benefit_schedules_coverage_id_fkey', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['plan_id'], ['plans.id'], name='plan_benefit_schedules_plan_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='plan_benefit_schedules_pkey'),
    comment='Detailed benefit schedules for insurance plans with enhanced TOB features',
    postgresql_ignore_search_path=False
    )
    op.create_index('idx_plan_benefit_schedules_plan_id', 'plan_benefit_schedules', ['plan_id'], unique=False)
    op.create_index('idx_plan_benefit_schedules_category_id', 'plan_benefit_schedules', ['category_id'], unique=False)
    op.create_index('idx_plan_benefit_schedules_active', 'plan_benefit_schedules', ['is_active'], unique=False, postgresql_where='(is_active = true)')
    op.create_table('member_signatures',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('member_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('signature_url', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('signed_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('policy_channels',
    sa.Column('code', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('billing_statements',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('entity_type', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('entity_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('billing_period_start', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('billing_period_end', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('total_due', sa.NUMERIC(precision=14, scale=2), autoincrement=False, nullable=True),
    sa.Column('status', sa.TEXT(), server_default=sa.text("'draft'::text"), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.CheckConstraint("entity_type = ANY (ARRAY['policy'::text, 'group'::text, 'company'::text])", name='billing_statements_entity_type_check'),
    sa.CheckConstraint("status = ANY (ARRAY['draft'::text, 'sent'::text, 'paid'::text, 'overdue'::text])", name='billing_statements_status_check')
    )
    op.create_table('providers',
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('provider_type_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('email', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('phone', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('address', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('city_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('latitude', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('longitude', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('rating', sa.NUMERIC(precision=3, scale=2), server_default=sa.text('0.0'), autoincrement=False, nullable=True),
    sa.Column('logo_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='providers_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('icd10_codes',
    sa.Column('code', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('serendipity_patterns',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('pattern_name', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('pattern_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('discovery_algorithm', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('data_sources', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('pattern_definition', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('significance_threshold', sa.NUMERIC(precision=5, scale=4), server_default=sa.text('0.8'), autoincrement=False, nullable=True),
    sa.Column('discovery_frequency', sa.VARCHAR(length=20), server_default=sa.text("'daily'::character varying"), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='serendipity_patterns_pkey')
    )
    op.create_table('policy_coverages',
    sa.Column('policy_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('coverage_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('coverage_limit', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('co_insurance', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('is_override', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('assigned_by', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('regulatory_requirements',
    sa.Column('framework_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('requirement_code', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('requirement_name', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('requirement_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('calculation_method', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('frequency', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('threshold_values', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('is_mandatory', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('effective_from', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('effective_to', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('motor_exclusion_categories',
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('states',
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('country_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('users_backup',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('username', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('email', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('password_hash', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('first_name', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('last_name', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('phone', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('last_login', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('failed_login_attempts', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('account_locked_until', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('password_changed_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('must_change_password', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('full_name', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('role_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('profile_image_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('language', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('theme', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('company_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('id_uuid', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('premium_rules',
    sa.Column('pricing_profile_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('service_type', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('is_included', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('coinsurance_percent', sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=True),
    sa.Column('coverage_limit', sa.NUMERIC(precision=12, scale=2), autoincrement=False, nullable=True),
    sa.Column('copayment_amount', sa.NUMERIC(precision=12, scale=2), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('report_schedules',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('template_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('schedule_name', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('schedule_expression', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('parameters', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True),
    sa.Column('recipients', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True),
    sa.Column('delivery_method', sa.VARCHAR(length=30), server_default=sa.text("'email'::character varying"), autoincrement=False, nullable=True),
    sa.Column('file_formats', postgresql.ARRAY(sa.VARCHAR(length=50)), server_default=sa.text("ARRAY['pdf'::text]"), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('last_run_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('next_run_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('success_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('failure_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('last_error_message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.CheckConstraint("delivery_method::text = ANY (ARRAY['email'::character varying, 'ftp'::character varying, 'api'::character varying, 'portal'::character varying, 'webhook'::character varying]::text[])", name='report_schedules_delivery_method_check'),
    sa.ForeignKeyConstraint(['template_id'], ['report_templates.id'], name='report_schedules_template_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='report_schedules_pkey'),
    sa.UniqueConstraint('schedule_name', name='report_schedules_schedule_name_key', postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index('idx_report_schedules_template_id', 'report_schedules', ['template_id'], unique=False)
    op.create_index('idx_report_schedules_active', 'report_schedules', ['is_active'], unique=False, postgresql_where='(is_active = true)')
    op.create_table('wearable_devices',
    sa.Column('member_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('device_brand', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('device_model', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('device_id', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('health_permissions', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('data_sharing_consent', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('sync_frequency_minutes', sa.INTEGER(), server_default=sa.text('60'), autoincrement=False, nullable=True),
    sa.Column('last_sync_timestamp', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('privacy_settings', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('connected_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('provider_network_assignments',
    sa.Column('provider_network_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('company_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('group_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('contract_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('member_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('notifications_read_log',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('notification_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('read_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='notifications_read_log_pkey')
    )
    op.create_table('report_comments',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('report_instance_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('component_id', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('comment_text', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('comment_type', sa.VARCHAR(length=30), server_default=sa.text("'general'::character varying"), autoincrement=False, nullable=True),
    sa.Column('position_data', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True),
    sa.Column('parent_comment_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('is_resolved', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('resolved_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('resolved_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.CheckConstraint("comment_type::text = ANY (ARRAY['general'::character varying, 'question'::character varying, 'insight'::character varying, 'action_item'::character varying, 'bug'::character varying, 'enhancement'::character varying]::text[])", name='report_comments_comment_type_check'),
    sa.ForeignKeyConstraint(['parent_comment_id'], ['report_comments.id'], name='report_comments_parent_comment_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['report_instance_id'], ['report_instances.id'], name='report_comments_report_instance_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='report_comments_pkey')
    )
    op.create_table('time_series_metrics',
    sa.Column('metric_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('metric_category', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('data_type', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('aggregation_method', sa.VARCHAR(length=30), autoincrement=False, nullable=True),
    sa.Column('unit_of_measure', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('collection_frequency', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('retention_period_days', sa.INTEGER(), server_default=sa.text('365'), autoincrement=False, nullable=True),
    sa.Column('anomaly_detection_enabled', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('forecasting_enabled', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('process_step_executions',
    sa.Column('instance_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('step_name', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('step_type', sa.VARCHAR(length=30), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=30), autoincrement=False, nullable=True),
    sa.Column('input_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('output_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('executed_by', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('execution_time_ms', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('started_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('completed_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('quantum_computations',
    sa.Column('algorithm_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('computation_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('input_parameters', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('quantum_circuit', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('execution_time_ms', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('quantum_advantage_factor', sa.NUMERIC(precision=8, scale=4), autoincrement=False, nullable=True),
    sa.Column('fidelity_score', sa.NUMERIC(precision=5, scale=4), autoincrement=False, nullable=True),
    sa.Column('error_rate', sa.NUMERIC(precision=8, scale=6), autoincrement=False, nullable=True),
    sa.Column('classical_benchmark_time', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('results', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('executed_on', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('executed_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('medical_cards',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('member_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('policy_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('company_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('issued_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('expires_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('plan_name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('card_number', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('qr_code_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('data_annotations',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('dataset_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('sample_id', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('sample_path', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('annotation_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('annotations', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('confidence_score', sa.NUMERIC(precision=3, scale=2), autoincrement=False, nullable=True),
    sa.Column('quality_rating', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('needs_review', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('is_validated', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('annotated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('annotation_time_seconds', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('annotation_method', sa.VARCHAR(length=30), autoincrement=False, nullable=True),
    sa.Column('reviewed_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('reviewed_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('review_comments', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('payment_methods',
    sa.Column('member_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('method_type', sa.VARCHAR(length=30), autoincrement=False, nullable=False),
    sa.Column('provider', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('account_identifier', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('is_default', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('expiry_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('billing_address', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('language_settings',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('company_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('preferred_language', sa.TEXT(), server_default=sa.text("'en'::text"), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('delegates',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('company_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('group_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('delegate_name', sa.VARCHAR(length=150), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(length=150), autoincrement=False, nullable=False),
    sa.Column('phone', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('position', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('department', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('permissions', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('is_primary', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['company_id'], ['companies.id'], name='delegates_company_id_fkey'),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name='delegates_created_by_fkey'),
    sa.ForeignKeyConstraint(['group_id'], ['groups.id'], name='delegates_group_id_fkey'),
    sa.ForeignKeyConstraint(['updated_by'], ['users.id'], name='delegates_updated_by_fkey'),
    sa.PrimaryKeyConstraint('id', name='delegates_pkey'),
    comment='Corporate HR delegates authorized to manage group policies'
    )
    op.create_index('idx_delegates_company', 'delegates', ['company_id'], unique=False)
    op.create_index('idx_delegates_active', 'delegates', ['is_active'], unique=False, postgresql_where='(is_active = true)')
    op.create_table('pricing_version_logs',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('target_type', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('target_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('version_from', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('version_to', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('change_description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('changed_by', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('changed_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.CheckConstraint("target_type::text = ANY (ARRAY['RULE'::character varying::text, 'PROFILE'::character varying::text])", name='pricing_version_logs_target_type_check')
    )
    op.create_table('training_datasets',
    sa.Column('dataset_name', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('dataset_version', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('dataset_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('data_source', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('collection_method', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('total_samples', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('total_size_bytes', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('quality_score', sa.NUMERIC(precision=3, scale=2), autoincrement=False, nullable=True),
    sa.Column('completeness_percentage', sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=True),
    sa.Column('accuracy_percentage', sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=True),
    sa.Column('consistency_score', sa.NUMERIC(precision=3, scale=2), autoincrement=False, nullable=True),
    sa.Column('feature_schema', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('target_variables', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('data_distribution', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('preprocessing_steps', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('augmentation_techniques', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('storage_location', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('access_credentials_ref', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('format', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('contains_pii', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('privacy_level', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('consent_obtained', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('gdpr_compliant', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=30), server_default=sa.text("'active'::character varying"), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('approved_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('sustainability_indicators',
    sa.Column('framework_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('indicator_code', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('indicator_name', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('category', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('measurement_unit', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('calculation_method', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('data_source_requirements', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('target_setting_guidance', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('industry_benchmarks', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('conversational_ai_models',
    sa.Column('model_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('model_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('language_capabilities', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True),
    sa.Column('domain_specialization', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('context_window_size', sa.INTEGER(), server_default=sa.text('4096'), autoincrement=False, nullable=True),
    sa.Column('response_quality_score', sa.NUMERIC(precision=3, scale=2), autoincrement=False, nullable=True),
    sa.Column('hallucination_rate', sa.NUMERIC(precision=5, scale=4), autoincrement=False, nullable=True),
    sa.Column('api_endpoint', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('cost_per_token', sa.NUMERIC(precision=12, scale=8), autoincrement=False, nullable=True),
    sa.Column('is_production', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False)
    )
    op.create_table('report_shares',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('report_instance_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('shared_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('shared_with_type', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('shared_with_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('access_level', sa.VARCHAR(length=20), server_default=sa.text("'read'::character varying"), autoincrement=False, nullable=True),
    sa.Column('share_token', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('expires_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('access_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('last_accessed_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.CheckConstraint("access_level::text = ANY (ARRAY['read'::character varying, 'comment'::character varying, 'edit'::character varying, 'admin'::character varying]::text[])", name='report_shares_access_level_check'),
    sa.CheckConstraint("shared_with_type::text = ANY (ARRAY['user'::character varying, 'role'::character varying, 'department'::character varying, 'public'::character varying, 'group'::character varying]::text[])", name='report_shares_shared_with_type_check'),
    sa.ForeignKeyConstraint(['report_instance_id'], ['report_instances.id'], name='report_shares_report_instance_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='report_shares_pkey'),
    sa.UniqueConstraint('share_token', name='report_shares_share_token_key', postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('cities',
    sa.Column('name_en', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('country_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('geom', sa.NullType(), autoincrement=False, nullable=True),
    sa.Column('postal_code', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('region_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('name_ar', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['country_id'], ['countries.id'], name='fk_cities_country_id', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['region_id'], ['regions.id'], name='fk_cities_region_id', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name='pk_cities')
    )
    op.create_table('forecasting_models',
    sa.Column('model_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('model_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('target_metric_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('model_parameters', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('training_period_start', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('training_period_end', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('validation_metrics', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('seasonal_patterns', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('trend_analysis', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('forecast_horizon_days', sa.INTEGER(), server_default=sa.text('90'), autoincrement=False, nullable=True),
    sa.Column('confidence_intervals', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('is_production', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('last_retrained', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('blockchain_networks',
    sa.Column('network_name', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('network_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('rpc_endpoint', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('explorer_url', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('native_currency', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('gas_price_gwei', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('is_testnet', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('exchange_rates',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('base_currency', sa.VARCHAR(length=3), autoincrement=False, nullable=False),
    sa.Column('target_currency', sa.VARCHAR(length=3), autoincrement=False, nullable=False),
    sa.Column('exchange_rate', sa.NUMERIC(precision=12, scale=6), autoincrement=False, nullable=False),
    sa.Column('effective_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('versioned_documents',
    sa.Column('template_name', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('document_type', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('current_version', sa.INTEGER(), server_default=sa.text('1'), autoincrement=False, nullable=True),
    sa.Column('total_versions', sa.INTEGER(), server_default=sa.text('1'), autoincrement=False, nullable=True),
    sa.Column('base_template', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('variable_definitions', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('conditional_sections', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('regulatory_version', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('legal_review_required', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('last_legal_review', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('usage_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('last_used', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=30), server_default=sa.text("'active'::character varying"), autoincrement=False, nullable=True),
    sa.Column('replacement_template_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('quotation_factors',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('quotation_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('key', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('value', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('factor_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('impact_description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('claims',
    sa.Column('claim_number', sa.VARCHAR(length=30), autoincrement=False, nullable=False),
    sa.Column('card_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('policy_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('claim_type', postgresql.ENUM('medical', 'motor', 'property', 'life', 'travel', 'cyber', 'disability', name='claimtypeenum'), autoincrement=False, nullable=False),
    sa.Column('status', postgresql.ENUM('pending', 'approved', 'rejected', 'in_review', 'completed', 'cancelled', 'under_investigation', name='claimstatusenum'), server_default=sa.text("'pending'::claimstatusenum"), autoincrement=False, nullable=True),
    sa.Column('incident_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('reported_date', sa.DATE(), server_default=sa.text('CURRENT_DATE'), autoincrement=False, nullable=True),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('amount', sa.NUMERIC(precision=15, scale=2), autoincrement=False, nullable=True),
    sa.Column('currency', sa.VARCHAR(length=3), server_default=sa.text("'USD'::character varying"), autoincrement=False, nullable=True),
    sa.Column('location', sa.NullType(), autoincrement=False, nullable=True),
    sa.Column('assigned_adjuster', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('priority', sa.VARCHAR(length=20), server_default=sa.text("'normal'::character varying"), autoincrement=False, nullable=True),
    sa.Column('fraud_indicators', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('settlement_amount', sa.NUMERIC(precision=15, scale=2), autoincrement=False, nullable=True),
    sa.Column('settlement_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('provider_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('claim_source', sa.TEXT(), server_default=sa.text("'TPA'::text"), autoincrement=False, nullable=True),
    sa.Column('imported_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('import_batch_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('member_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('deleted_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.CheckConstraint('amount > 0::numeric', name='chk_claims_amount_positive'),
    sa.ForeignKeyConstraint(['member_id'], ['members.id'], name='fk_claims_member_id', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['policy_id'], ['policies.id'], name='fk_claims_policy_id', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='pk_claims'),
    postgresql_ignore_search_path=False
    )
    op.create_index('idx_claims_status_date', 'claims', ['status', sa.text('created_at DESC')], unique=False)
    op.create_index('idx_claims_policy_id', 'claims', ['policy_id'], unique=False)
    op.create_index('idx_claims_member_policy_status_concurrent', 'claims', ['member_id', 'policy_id', 'status'], unique=False)
    op.create_index('idx_claims_member_id', 'claims', ['member_id'], unique=False)
    op.create_table('plan_types',
    sa.Column('code', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('label', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('icon', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('order_index', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('language_labels', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('pricing_models',
    sa.Column('model_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('product_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('model_version', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('model_type', sa.VARCHAR(length=30), autoincrement=False, nullable=True),
    sa.Column('base_factors', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('adjustment_factors', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('model_coefficients', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('confidence_interval', sa.NUMERIC(precision=5, scale=4), autoincrement=False, nullable=True),
    sa.Column('accuracy_metrics', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('training_data_period', postgresql.DATERANGE(), autoincrement=False, nullable=True),
    sa.Column('last_calibration_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('approved_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('conversation_memory',
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('memory_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('memory_key', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('memory_value', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('confidence_level', sa.NUMERIC(precision=3, scale=2), autoincrement=False, nullable=True),
    sa.Column('source_conversation_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('extraction_method', sa.VARCHAR(length=30), autoincrement=False, nullable=True),
    sa.Column('validation_status', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('first_mentioned', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('last_reinforced', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('reinforcement_count', sa.INTEGER(), server_default=sa.text('1'), autoincrement=False, nullable=True),
    sa.Column('contradiction_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('memory_strength', sa.NUMERIC(precision=5, scale=4), autoincrement=False, nullable=True),
    sa.Column('decay_function', sa.VARCHAR(length=20), server_default=sa.text("'exponential'::character varying"), autoincrement=False, nullable=True),
    sa.Column('half_life_days', sa.INTEGER(), server_default=sa.text('30'), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('user_id_uuid', sa.UUID(), autoincrement=False, nullable=True)
    )
    op.create_table('decision_universes',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('decision_name', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('decision_context', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('universe_count', sa.INTEGER(), server_default=sa.text('5'), autoincrement=False, nullable=True),
    sa.Column('decision_parameters', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('evaluation_criteria', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('time_horizon_months', sa.INTEGER(), server_default=sa.text('12'), autoincrement=False, nullable=True),
    sa.Column('simulation_complexity', sa.VARCHAR(length=20), server_default=sa.text("'medium'::character varying"), autoincrement=False, nullable=True),
    sa.Column('stakeholders', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('decision_deadline', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=30), server_default=sa.text("'setup'::character varying"), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='decision_universes_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('policy_schedule',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('policy_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('event_type', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('scheduled_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('status', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('executed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.CheckConstraint("event_type = ANY (ARRAY['renewal'::text, 'lapse'::text, 'cancellation'::text, 'auto_renew'::text])", name='policy_schedule_event_type_check')
    )
    op.create_table('security_sessions',
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('session_id', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('device_fingerprint', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('ip_address', postgresql.INET(), autoincrement=False, nullable=True),
    sa.Column('user_agent', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('location_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('trust_score', sa.INTEGER(), server_default=sa.text('50'), autoincrement=False, nullable=True),
    sa.Column('risk_indicators', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('last_activity', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('expires_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('user_id_uuid', sa.UUID(), autoincrement=False, nullable=True)
    )
    op.create_table('bi_dashboard_cache',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('widget_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('cache_key', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('cached_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('cached_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('expires_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('is_valid', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['widget_id'], ['bi_widgets.id'], name='bi_dashboard_cache_widget_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='bi_dashboard_cache_pkey')
    )
    op.create_table('languages',
    sa.Column('language_code', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('iso_639_code', sa.VARCHAR(length=3), autoincrement=False, nullable=True),
    sa.Column('language_name', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('native_name', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('text_direction', sa.VARCHAR(length=3), server_default=sa.text("'ltr'::character varying"), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('completion_percentage', sa.NUMERIC(precision=5, scale=2), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('ai_conversations',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('member_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('session_id', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('model_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('conversation_topic', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('conversation_transcript', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('sentiment_progression', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('resolution_status', sa.VARCHAR(length=30), autoincrement=False, nullable=True),
    sa.Column('customer_satisfaction_score', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('handoff_to_human', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('handoff_reason', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('total_tokens_used', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('conversation_cost', sa.NUMERIC(precision=10, scale=4), autoincrement=False, nullable=True),
    sa.Column('started_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('ended_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True)
    )
    op.create_table('provider_images',
    sa.Column('provider_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('image_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('label', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('uploaded_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('provider_network_members',
    sa.Column('provider_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('provider_network_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), server_default=sa.text("'active'::character varying"), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('catastrophe_models',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('model_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('vendor', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('model_version', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('peril_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('geographic_region', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('model_resolution', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('currency', sa.VARCHAR(length=3), autoincrement=False, nullable=True),
    sa.Column('model_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('annual_aggregate_exceedance', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('occurrence_exceedance', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('calibration_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('last_updated', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='catastrophe_models_pkey'),
    comment='CAT risk models for natural disasters and catastrophic events'
    )
    op.create_index('idx_catastrophe_models_peril_region', 'catastrophe_models', ['peril_type', 'geographic_region'], unique=False)
    op.create_table('data_quality_checks',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('rule_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('check_date', sa.DATE(), server_default=sa.text('CURRENT_DATE'), autoincrement=False, nullable=False),
    sa.Column('total_records', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('failed_records', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('pass_percentage', sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('error_details', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('sample_errors', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True),
    sa.Column('execution_time_ms', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('claim_approvers',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('claim_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('min_amount', sa.NUMERIC(precision=15, scale=2), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('max_amount', sa.NUMERIC(precision=15, scale=2), autoincrement=False, nullable=True),
    sa.Column('approver_role', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('approval_level', sa.INTEGER(), server_default=sa.text('1'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='claim_approvers_pkey')
    )
    op.create_table('exclusions',
    sa.Column('text', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('type', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('cpt_code_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('icd10_code_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('motor_code_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.CheckConstraint("type::text = ANY (ARRAY['medical'::character varying::text, 'motor'::character varying::text])", name='exclusions_type_check')
    )
    op.create_table('iot_devices',
    sa.Column('device_type_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('member_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('device_serial_number', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('firmware_version', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('last_seen', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('location', sa.NullType(), autoincrement=False, nullable=True),
    sa.Column('battery_level', sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=True),
    sa.Column('signal_strength', sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=30), autoincrement=False, nullable=True),
    sa.Column('configuration', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('security_keys', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('installed_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('warranty_expires', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['member_id'], ['members.id'], name='fk_iot_devices_member_id', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='iot_devices_pkey')
    )
    op.create_index('idx_iot_devices_type_active', 'iot_devices', ['device_type_id', 'status'], unique=False, postgresql_where="((status)::text = 'active'::text)")
    op.create_index('idx_iot_devices_type', 'iot_devices', ['device_type_id'], unique=False)
    op.create_table('treaty_statements',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('agreement_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('statement_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('gross_premium', sa.NUMERIC(precision=12, scale=2), autoincrement=False, nullable=True),
    sa.Column('commission_deducted', sa.NUMERIC(precision=12, scale=2), autoincrement=False, nullable=True),
    sa.Column('loss_recovery', sa.NUMERIC(precision=12, scale=2), autoincrement=False, nullable=True),
    sa.Column('balance_due', sa.NUMERIC(precision=12, scale=2), autoincrement=False, nullable=True),
    sa.Column('status', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.CheckConstraint("status = ANY (ARRAY['sent'::text, 'received'::text, 'settled'::text])", name='treaty_statements_status_check')
    )
    op.create_table('pricing_profiles',
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('insurance_type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('base_premium', sa.DOUBLE_PRECISION(precision=53), server_default=sa.text('0.0'), autoincrement=False, nullable=True),
    sa.Column('min_premium', sa.DOUBLE_PRECISION(precision=53), server_default=sa.text('0.0'), autoincrement=False, nullable=True),
    sa.Column('max_premium', sa.DOUBLE_PRECISION(precision=53), server_default=sa.text('0.0'), autoincrement=False, nullable=True),
    sa.Column('currency', sa.VARCHAR(), server_default=sa.text("'USD'::character varying"), autoincrement=False, nullable=True),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('version', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('effective_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('uuid', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('groups',
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('company_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('parent_group_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['company_id'], ['companies.id'], name='fk_groups_company_id', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='pk_groups'),
    postgresql_ignore_search_path=False
    )
    op.create_table('coverage_options',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('insurance_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('option_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('base_price', sa.NUMERIC(precision=15, scale=2), autoincrement=False, nullable=False),
    sa.Column('pricing_formula', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_optional', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('regions',
    sa.Column('country_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('code', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['country_id'], ['countries.id'], name='fk_regions_country_id', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='pk_regions')
    )
    op.create_table('translations_enhanced',
    sa.Column('key_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('language_code', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('translated_text', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('translation_status', sa.VARCHAR(length=30), server_default=sa.text("'draft'::character varying"), autoincrement=False, nullable=True),
    sa.Column('quality_score', sa.NUMERIC(precision=3, scale=2), autoincrement=False, nullable=True),
    sa.Column('translated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('translation_method', sa.VARCHAR(length=30), autoincrement=False, nullable=True),
    sa.Column('translation_engine', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('reviewed_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('reviewed_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('review_notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('version', sa.INTEGER(), server_default=sa.text('1'), autoincrement=False, nullable=True),
    sa.Column('is_current', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False)
    )
    op.create_table('companies',
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('registration_number', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('tax_id', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('email', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('phone', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('address', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('postal_code', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('website', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('logo_url', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('license_number', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('license_expiry_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('regulatory_rating', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('solvency_ratio', sa.NUMERIC(precision=8, scale=4), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('geom', sa.NullType(), autoincrement=False, nullable=True),
    sa.Column('country_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('state_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('city_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('default_language', sa.VARCHAR(length=10), server_default=sa.text("'en'::character varying"), autoincrement=False, nullable=True),
    sa.Column('theme_color', sa.VARCHAR(length=20), server_default=sa.text("'#0066cc'::character varying"), autoincrement=False, nullable=True),
    sa.Column('timezone', sa.VARCHAR(length=50), server_default=sa.text("'Asia/Beirut'::character varying"), autoincrement=False, nullable=True),
    sa.Column('subscription_status', sa.VARCHAR(length=20), server_default=sa.text("'active'::character varying"), autoincrement=False, nullable=True),
    sa.Column('custom_domain', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('region_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='pk_companies'),
    postgresql_ignore_search_path=False
    )
    op.create_index('idx_companies_name_search', 'companies', [sa.text("to_tsvector('english'::regconfig, name::text)")], unique=False, postgresql_using='gin')
    op.create_table('underwriting_applications',
    sa.Column('application_number', sa.VARCHAR(length=30), autoincrement=False, nullable=False),
    sa.Column('member_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('product_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('application_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('submission_channel', sa.VARCHAR(length=30), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=30), server_default=sa.text("'submitted'::character varying"), autoincrement=False, nullable=True),
    sa.Column('assigned_underwriter', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('priority', sa.VARCHAR(length=20), server_default=sa.text("'normal'::character varying"), autoincrement=False, nullable=True),
    sa.Column('sla_due_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('policy_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('submitted_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('source', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('channel', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('assigned_to', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('decision_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('estimated_premium', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('premium_score', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('pricing_model_used', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('catastrophe_detection_models',
    sa.Column('model_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('detection_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('input_data_types', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('model_architecture', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('accuracy_metrics', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('false_positive_rate', sa.NUMERIC(precision=6, scale=4), autoincrement=False, nullable=True),
    sa.Column('false_negative_rate', sa.NUMERIC(precision=6, scale=4), autoincrement=False, nullable=True),
    sa.Column('processing_time_seconds', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('geographical_coverage', sa.NullType(), autoincrement=False, nullable=True),
    sa.Column('is_real_time', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('policy_payments',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('policy_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('amount', sa.NUMERIC(precision=12, scale=2), autoincrement=False, nullable=True),
    sa.Column('payment_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('payment_method', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('status', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('receipt_number', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_refunded', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.CheckConstraint("status = ANY (ARRAY['paid'::text, 'pending'::text, 'failed'::text, 'refunded'::text])", name='policy_payments_status_check')
    )
    op.create_table('provider_flags',
    sa.Column('provider_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('flag_type', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('flag_reason', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('flagged_by', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('skills_gap_analysis',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('analysis_name', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('department_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('analysis_date', sa.DATE(), server_default=sa.text('CURRENT_DATE'), autoincrement=False, nullable=True),
    sa.Column('current_skills_inventory', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('future_skills_requirements', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('identified_gaps', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('gap_severity_assessment', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('affected_employee_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('estimated_impact', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('recommended_actions', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('implementation_timeline', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('budget_requirements', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('success_metrics', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('analysis_status', sa.VARCHAR(length=30), server_default=sa.text("'draft'::character varying"), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='skills_gap_analysis_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('underwriting_workflow_steps',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('order_index', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('step_type', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_required', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.CheckConstraint("step_type = ANY (ARRAY['auto'::text, 'manual'::text])", name='underwriting_workflow_steps_step_type_check')
    )
    op.create_table('group_audit_logs',
    sa.Column('group_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('action', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('performed_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('old_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('new_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False)
    )
    op.create_table('document_access',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('document_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('audience_type', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('audience_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('can_view', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False),
    sa.Column('expires_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.CheckConstraint("audience_type = ANY (ARRAY['internal'::text, 'member'::text, 'company'::text, 'group'::text, 'policy'::text, 'agent'::text, 'garage'::text])", name='document_access_audience_type_check'),
    sa.ForeignKeyConstraint(['document_id'], ['documents.id'], name='document_access_document_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='document_access_pkey'),
    sa.UniqueConstraint('document_id', 'audience_type', 'audience_id', name='document_access_document_id_audience_type_audience_id_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    comment='Explicit audience visibility grants for a document (cross-portal rules).'
    )
    op.create_index('idx_doc_access_doc', 'document_access', ['document_id'], unique=False)
    op.create_index('idx_doc_access_audience', 'document_access', ['audience_type', 'audience_id'], unique=False)
    op.create_table('ai_tasks',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('task_type', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=50), server_default=sa.text("'pending'::character varying"), autoincrement=False, nullable=False),
    sa.Column('input_source', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('output_result', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('error_log', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('completed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('related_entity_type', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('related_entity_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='ai_tasks_pkey')
    )
    op.create_table('personalized_content_delivery',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('member_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('template_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('delivery_channel', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('personalized_content', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('delivery_timestamp', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('opened', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('clicked', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('converted', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('engagement_score', sa.NUMERIC(precision=3, scale=2), autoincrement=False, nullable=True),
    sa.Column('feedback_rating', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('optimization_feedback', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('policy_status_logs',
    sa.Column('policy_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('old_status', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('new_status', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('changed_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('change_reason', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('changed_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False)
    )
    op.create_table('qr_view_logs',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('public_token', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('viewer_ip', postgresql.INET(), autoincrement=False, nullable=True),
    sa.Column('viewer_user_agent', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('viewed_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('referrer_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='qr_view_logs_pkey')
    )
    op.create_table('benefit_change_log',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('benefit_schedule_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('change_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('table_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('record_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('old_values', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('new_values', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('changed_fields', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True),
    sa.Column('change_reason', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('change_source', sa.VARCHAR(length=50), server_default=sa.text("'manual'::character varying"), autoincrement=False, nullable=True),
    sa.Column('changed_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('changed_by', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('ip_address', postgresql.INET(), autoincrement=False, nullable=True),
    sa.Column('user_agent', sa.TEXT(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['benefit_schedule_id'], ['plan_benefit_schedules.id'], name='benefit_change_log_benefit_schedule_id_fkey', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name='benefit_change_log_pkey'),
    comment='Audit log for all changes to benefit-related data'
    )
    op.create_index('idx_benefit_change_log_schedule_id', 'benefit_change_log', ['benefit_schedule_id'], unique=False)
    op.create_index('idx_benefit_change_log_changed_at', 'benefit_change_log', [sa.text('changed_at DESC')], unique=False)
    op.create_table('api_rate_limits',
    sa.Column('api_key_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('endpoint_pattern', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('requests_per_second', sa.INTEGER(), server_default=sa.text('10'), autoincrement=False, nullable=True),
    sa.Column('requests_per_minute', sa.INTEGER(), server_default=sa.text('600'), autoincrement=False, nullable=True),
    sa.Column('requests_per_hour', sa.INTEGER(), server_default=sa.text('36000'), autoincrement=False, nullable=True),
    sa.Column('requests_per_day', sa.INTEGER(), server_default=sa.text('864000'), autoincrement=False, nullable=True),
    sa.Column('burst_limit', sa.INTEGER(), server_default=sa.text('50'), autoincrement=False, nullable=True),
    sa.Column('burst_window_seconds', sa.INTEGER(), server_default=sa.text('60'), autoincrement=False, nullable=True),
    sa.Column('current_second_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('current_minute_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('current_hour_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('current_day_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('second_reset_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('minute_reset_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('hour_reset_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('day_reset_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('violations_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('last_violation_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False)
    )
    op.create_table('quotation_pricing_profiles',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('insurance_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('currency_code', sa.VARCHAR(length=3), server_default=sa.text("'USD'::character varying"), autoincrement=False, nullable=True),
    sa.Column('base_premium', sa.NUMERIC(precision=15, scale=2), autoincrement=False, nullable=True),
    sa.Column('min_premium', sa.NUMERIC(precision=15, scale=2), autoincrement=False, nullable=True),
    sa.Column('max_premium', sa.NUMERIC(precision=15, scale=2), autoincrement=False, nullable=True),
    sa.Column('risk_formula', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_default', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('version', sa.INTEGER(), server_default=sa.text('1'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.CheckConstraint("currency_code::text ~ '^[A-Z]{3}$'::text", name='quotation_pricing_profiles_currency_code_check')
    )
    op.create_table('ticket_requests',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('member_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('category', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('subject', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=50), server_default=sa.text("'open'::character varying"), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['member_id'], ['members.id'], name='ticket_requests_member_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='ticket_requests_pkey')
    )
    op.create_table('claim_assessments',
    sa.Column('claim_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('assessor_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('assessment_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('assessment_date', sa.DATE(), server_default=sa.text('CURRENT_DATE'), autoincrement=False, nullable=True),
    sa.Column('damage_description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('estimated_cost', sa.NUMERIC(precision=15, scale=2), autoincrement=False, nullable=True),
    sa.Column('recommended_action', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('photos', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('report_file_path', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('policy_types',
    sa.Column('code', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('saas_plan_features',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('saas_plan_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('feature_flag_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('is_enabled', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['feature_flag_id'], ['saas_feature_flags.id'], name='saas_plan_features_feature_flag_id_fkey'),
    sa.ForeignKeyConstraint(['saas_plan_id'], ['saas_plans.id'], name='saas_plan_features_saas_plan_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='saas_plan_features_pkey')
    )
    op.create_table('template_variables',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('template_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('variable_key', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('label', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('sample_value', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('premium_networks',
    sa.Column('pricing_profile_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('network_type', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('surcharge', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('premium_age_brackets',
    sa.Column('pricing_profile_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('age_from', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('age_to', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('premium', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=False),
    sa.Column('gender', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('cohort_analysis',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('cohort_definition_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('cohort_period', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('analysis_period', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('cohort_size', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('active_customers', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('retention_rate', sa.NUMERIC(precision=5, scale=4), autoincrement=False, nullable=True),
    sa.Column('revenue_per_customer', sa.NUMERIC(precision=15, scale=2), autoincrement=False, nullable=True),
    sa.Column('total_revenue', sa.NUMERIC(precision=15, scale=2), autoincrement=False, nullable=True),
    sa.Column('cumulative_revenue', sa.NUMERIC(precision=15, scale=2), autoincrement=False, nullable=True),
    sa.Column('average_order_value', sa.NUMERIC(precision=15, scale=2), autoincrement=False, nullable=True),
    sa.Column('purchase_frequency', sa.NUMERIC(precision=8, scale=4), autoincrement=False, nullable=True),
    sa.Column('customer_lifetime_value', sa.NUMERIC(precision=15, scale=2), autoincrement=False, nullable=True),
    sa.Column('engagement_metrics', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('product_usage_patterns', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('channel_preferences', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('calculated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('document_expiry_alerts',
    sa.Column('document_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('alert_sent_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('method', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('coverages',
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('coverage_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('maximum_amount', sa.NUMERIC(precision=15, scale=2), autoincrement=False, nullable=True),
    sa.Column('currency', sa.VARCHAR(length=3), server_default=sa.text("'USD'::character varying"), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('type', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='pk_coverages'),
    postgresql_ignore_search_path=False
    )
    op.create_table('premium_regions',
    sa.Column('region_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('load_factor', sa.NUMERIC(precision=5, scale=3), autoincrement=False, nullable=False),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('pricing_profile_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('premium_override_logs',
    sa.Column('quotation_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('overridden_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('original_premium', sa.NUMERIC(precision=12, scale=2), autoincrement=False, nullable=True),
    sa.Column('new_premium', sa.NUMERIC(precision=12, scale=2), autoincrement=False, nullable=True),
    sa.Column('reason', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('overridden_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False)
    )
    op.create_table('treaty_cessions',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('agreement_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('period_start', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('period_end', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('total_premium', sa.NUMERIC(precision=12, scale=2), autoincrement=False, nullable=True),
    sa.Column('total_claims', sa.NUMERIC(precision=12, scale=2), autoincrement=False, nullable=True),
    sa.Column('net_retention', sa.NUMERIC(precision=12, scale=2), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('usage_logs',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('module', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('action', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True)
    )
    op.create_table('topology',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('srid', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('precision', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('hasz', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='topology_pkey'),
    sa.UniqueConstraint('name', name='topology_name_key', postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('market_signals',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('source_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('signal_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('signal_title', sa.VARCHAR(length=300), autoincrement=False, nullable=True),
    sa.Column('signal_description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('raw_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('processed_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('confidence_score', sa.NUMERIC(precision=3, scale=2), autoincrement=False, nullable=True),
    sa.Column('impact_severity', sa.VARCHAR(length=20), server_default=sa.text("'medium'::character varying"), autoincrement=False, nullable=True),
    sa.Column('affected_business_areas', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('detected_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('validation_status', sa.VARCHAR(length=30), server_default=sa.text("'pending'::character varying"), autoincrement=False, nullable=True),
    sa.Column('validated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('validated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['source_id'], ['market_data_sources.id'], name='market_signals_source_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='market_signals_pkey')
    )
    op.create_table('bi_dashboards',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('dashboard_name', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('dashboard_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('layout_config', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('refresh_frequency', sa.VARCHAR(length=20), server_default=sa.text("'hourly'::character varying"), autoincrement=False, nullable=True),
    sa.Column('access_permissions', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('filters_config', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('data_sources', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='bi_dashboards_pkey')
    )
    op.create_table('session_embeddings',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('session_id', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('embedding_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('source_text', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('embedding', sa.NullType(), autoincrement=False, nullable=True),
    sa.Column('embedding_model', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('embedding_version', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('token_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('semantic_tags', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('importance_score', sa.NUMERIC(precision=3, scale=2), autoincrement=False, nullable=True),
    sa.Column('context_window', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True)
    )
    op.create_table('encryption_zones',
    sa.Column('zone_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('classification_level', sa.VARCHAR(length=30), autoincrement=False, nullable=True),
    sa.Column('encryption_algorithm_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('key_rotation_interval_days', sa.INTEGER(), server_default=sa.text('90'), autoincrement=False, nullable=True),
    sa.Column('access_control_policy', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('compliance_requirements', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True),
    sa.Column('geographic_restrictions', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('last_key_rotation', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('provider_documents',
    sa.Column('provider_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('document_type', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('file_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('expires_at', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('uploaded_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('document_signatures',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('document_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('signer_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('signer_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('signature_type', sa.VARCHAR(length=50), server_default=sa.text("'e-signature'::character varying"), autoincrement=False, nullable=False),
    sa.Column('signature_data', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('signed_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=50), server_default=sa.text("'signed'::character varying"), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['document_id'], ['documents.id'], name='document_signatures_document_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='document_signatures_pkey')
    )
    op.create_table('chaos_experiments',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('experiment_name', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('experiment_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('target_system', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('chaos_action', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('experiment_parameters', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('hypothesis', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('success_criteria', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('blast_radius', sa.VARCHAR(length=20), server_default=sa.text("'small'::character varying"), autoincrement=False, nullable=True),
    sa.Column('rollback_plan', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('safety_checks', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('schedule_config', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='chaos_experiments_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('member_history',
    sa.Column('member_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('field_name', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('old_value', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('new_value', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('changed_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('changed_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False)
    )
    op.create_table('quotation_coverage_options',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('quotation_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('coverage_option_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('calculated_price', sa.NUMERIC(precision=15, scale=2), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('vr_training_sessions',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('module_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('trainee_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('session_id', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('started_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('completed_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('completion_percentage', sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=True),
    sa.Column('performance_metrics', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('learning_progress', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('assessment_scores', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('feedback_rating', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('instructor_notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('certification_earned', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True)
    )
    op.create_table('recommendation_models',
    sa.Column('model_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('recommendation_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('algorithm_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('model_parameters', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('training_data_features', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('accuracy_metrics', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('real_time_capable', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('cold_start_strategy', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('explanation_capability', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('last_retrained', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('qr_styles',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('owner_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('owner_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('foreground_color', sa.VARCHAR(length=20), server_default=sa.text("'#000000'::character varying"), autoincrement=False, nullable=True),
    sa.Column('background_color', sa.VARCHAR(length=20), server_default=sa.text("'#FFFFFF'::character varying"), autoincrement=False, nullable=True),
    sa.Column('logo_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('border_size', sa.INTEGER(), server_default=sa.text('4'), autoincrement=False, nullable=True),
    sa.Column('image_format', sa.VARCHAR(length=10), server_default=sa.text("'png'::character varying"), autoincrement=False, nullable=True),
    sa.Column('caption_text', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='qr_styles_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('audit_logs',
    sa.Column('table_name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('record_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('action', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('performed_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('old_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('new_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.CheckConstraint("action = ANY (ARRAY['insert'::text, 'update'::text, 'delete'::text])", name='audit_logs_action_check')
    )
    op.create_table('cultural_preferences',
    sa.Column('locale_code', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('preference_category', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('preference_key', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('preference_value', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('cultural_notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('scheduled_tasks',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('task_name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('payload', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('status', sa.TEXT(), server_default=sa.text("'pending'::text"), autoincrement=False, nullable=True),
    sa.Column('scheduled_for', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('executed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('result', sa.TEXT(), autoincrement=False, nullable=True)
    )
    op.create_table('customer_personas',
    sa.Column('persona_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('demographic_profile', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('behavioral_patterns', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('risk_tolerance', sa.VARCHAR(length=30), autoincrement=False, nullable=True),
    sa.Column('product_preferences', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('channel_preferences', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('life_stage', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('value_drivers', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('communication_style', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('countries',
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('iso_code', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('phone_code', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='pk_countries')
    )
    op.create_table('workflow_queue',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('entity_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('entity_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('workflow_type', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('priority', sa.VARCHAR(length=20), server_default=sa.text("'medium'::character varying"), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=30), server_default=sa.text("'pending'::character varying"), autoincrement=False, nullable=True),
    sa.Column('scheduled_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('started_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('completed_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('retry_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('max_retries', sa.INTEGER(), server_default=sa.text('3'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.CheckConstraint("priority::text = ANY (ARRAY['low'::character varying, 'medium'::character varying, 'high'::character varying, 'critical'::character varying]::text[])", name='workflow_queue_priority_check'),
    sa.CheckConstraint("status::text = ANY (ARRAY['pending'::character varying, 'processing'::character varying, 'completed'::character varying, 'failed'::character varying, 'cancelled'::character varying]::text[])", name='workflow_queue_status_check'),
    sa.PrimaryKeyConstraint('id', name='workflow_queue_pkey')
    )
    op.create_index('idx_workflow_queue_processing', 'workflow_queue', ['status', 'priority', 'scheduled_at'], unique=False, postgresql_where="((status)::text = 'pending'::text)")
    op.create_index('idx_workflow_queue_entity_type_status', 'workflow_queue', ['entity_type', 'status', 'scheduled_at'], unique=False)
    op.create_table('company_esg_scores',
    sa.Column('company_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('framework_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('reporting_period_start', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('reporting_period_end', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('overall_esg_score', sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=True),
    sa.Column('environmental_score', sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=True),
    sa.Column('social_score', sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=True),
    sa.Column('governance_score', sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=True),
    sa.Column('detailed_scores', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('peer_comparison', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('improvement_areas', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('certification_level', sa.VARCHAR(length=30), autoincrement=False, nullable=True),
    sa.Column('third_party_verified', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('verifier_organization', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('calculated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('quotation_pricing_profile_rules',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('profile_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('rule_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('order_index', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('provider_tags',
    sa.Column('provider_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('tag', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('satellite_imagery',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('provider_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('image_id', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('capture_timestamp', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('geographic_bounds', sa.NullType(), autoincrement=False, nullable=True),
    sa.Column('resolution_meters', sa.NUMERIC(precision=8, scale=4), autoincrement=False, nullable=True),
    sa.Column('cloud_coverage_percentage', sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=True),
    sa.Column('image_url', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('processing_level', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('atmospheric_correction', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('quality_score', sa.NUMERIC(precision=3, scale=2), autoincrement=False, nullable=True),
    sa.Column('download_cost', sa.NUMERIC(precision=10, scale=4), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('auth_refresh_tokens',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('session_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('device_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('token_hash', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('token_type', postgresql.ENUM('refresh', name='token_type'), server_default=sa.text("'refresh'::token_type"), autoincrement=False, nullable=False),
    sa.Column('issued_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('expires_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('revoked_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('revoked_reason', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('replaced_by_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['device_id'], ['login_devices.id'], name='auth_refresh_tokens_device_id_fkey', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['replaced_by_id'], ['auth_refresh_tokens.id'], name='auth_refresh_tokens_replaced_by_id_fkey'),
    sa.ForeignKeyConstraint(['session_id'], ['sessions.id'], name='auth_refresh_tokens_session_id_fkey', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='auth_refresh_tokens_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='auth_refresh_tokens_pkey'),
    sa.UniqueConstraint('token_hash', name='auth_refresh_tokens_token_hash_key', postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index('idx_auth_refresh_tokens_user', 'auth_refresh_tokens', ['user_id', 'expires_at'], unique=False)
    op.create_index('idx_auth_refresh_tokens_session', 'auth_refresh_tokens', ['session_id'], unique=False)
    op.create_table('premium_coinsurance',
    sa.Column('uuid', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=True),
    sa.Column('pricing_profile_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('service_type', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('percentage', sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.CheckConstraint('percentage >= 0::numeric AND percentage <= 100::numeric', name='premium_coinsurance_percentage_check')
    )
    op.create_table('computer_vision_models',
    sa.Column('model_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('model_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('model_version', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('accuracy_metrics', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('model_endpoints', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('training_dataset_info', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('inference_cost_per_request', sa.NUMERIC(precision=10, scale=6), autoincrement=False, nullable=True),
    sa.Column('max_requests_per_second', sa.INTEGER(), server_default=sa.text('100'), autoincrement=False, nullable=True),
    sa.Column('is_production_ready', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('permission_restrictions',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('role_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('resource_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('action', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('access_level', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('conditions', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['role_id'], ['roles.id'], name='permission_restrictions_role_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='permission_restrictions_pkey')
    )
    op.create_table('claim_garage_assignments',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('claim_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('provider_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('status', postgresql.ENUM('assigned', 'collaborating', 'closed', name='garage_assignment_status'), server_default=sa.text("'assigned'::garage_assignment_status"), autoincrement=False, nullable=False),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('assigned_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('assigned_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('closed_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['assigned_by'], ['users.id'], name='cga_assigned_by_fkey', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['claim_id'], ['claims.id'], name='cga_claim_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['provider_id'], ['providers.id'], name='cga_provider_fkey', ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('id', name='claim_garage_assignments_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ux_cga_claim_active', 'claim_garage_assignments', ['claim_id'], unique=True, postgresql_where="(status = ANY (ARRAY['assigned'::garage_assignment_status, 'collaborating'::garage_assignment_status]))")
    op.create_index('idx_cga_provider_status', 'claim_garage_assignments', ['provider_id', 'status'], unique=False)
    op.create_table('garage_estimates',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('assignment_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('estimate_number', sa.VARCHAR(length=40), autoincrement=False, nullable=True),
    sa.Column('status', postgresql.ENUM('draft', 'submitted', 'needs_info', 'approved', 'rejected', 'revised', name='garage_estimate_status'), server_default=sa.text("'draft'::garage_estimate_status"), autoincrement=False, nullable=False),
    sa.Column('submitted_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('decided_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('decided_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('decision_note', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('subtotal_amount', sa.NUMERIC(precision=15, scale=2), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('tax_amount', sa.NUMERIC(precision=15, scale=2), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('discount_amount', sa.NUMERIC(precision=15, scale=2), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('total_amount', sa.NUMERIC(precision=15, scale=2), sa.Computed('((COALESCE(subtotal_amount, (0)::numeric) + COALESCE(tax_amount, (0)::numeric)) - COALESCE(discount_amount, (0)::numeric))', persisted=True), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['assignment_id'], ['claim_garage_assignments.id'], name='gest_assignment_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name='gest_created_by_fkey', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['decided_by'], ['users.id'], name='gest_decided_by_fkey', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name='garage_estimates_pkey'),
    sa.UniqueConstraint('estimate_number', name='garage_estimates_estimate_number_key', postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index('idx_gest_assignment_status', 'garage_estimates', ['assignment_id', 'status'], unique=False)
    op.create_table('nlp_models',
    sa.Column('model_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('model_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('language_support', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True),
    sa.Column('model_config', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('performance_metrics', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('api_endpoint', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('policy_cancellations',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('policy_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('cancellation_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('requested_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('effective_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('cancellation_reason', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('refund_amount', sa.NUMERIC(precision=15, scale=2), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('refund_processed', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('refund_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('requested_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('approved_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('approval_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('approval_notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=30), server_default=sa.text("'requested'::character varying"), autoincrement=False, nullable=True),
    sa.Column('is_reversed', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('reversal_reason', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.CheckConstraint("cancellation_type::text = ANY (ARRAY['member_request'::character varying, 'non_payment'::character varying, 'fraud'::character varying, 'regulatory'::character varying, 'underwriting_decline'::character varying, 'business_decision'::character varying]::text[])", name='valid_cancellation_type'),
    sa.CheckConstraint("status::text = ANY (ARRAY['requested'::character varying, 'under_review'::character varying, 'approved'::character varying, 'denied'::character varying, 'processed'::character varying, 'completed'::character varying]::text[])", name='valid_status'),
    sa.CheckConstraint('effective_date >= requested_date', name='valid_dates'),
    sa.ForeignKeyConstraint(['approved_by'], ['users.id'], name='policy_cancellations_approved_by_fkey'),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name='policy_cancellations_created_by_fkey'),
    sa.ForeignKeyConstraint(['policy_id'], ['policies.id'], name='policy_cancellations_policy_id_fkey', ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['requested_by'], ['users.id'], name='policy_cancellations_requested_by_fkey'),
    sa.ForeignKeyConstraint(['updated_by'], ['users.id'], name='policy_cancellations_updated_by_fkey'),
    sa.PrimaryKeyConstraint('id', name='policy_cancellations_pkey'),
    comment='Tracks all policy cancellation requests and processing workflow'
    )
    op.create_index('idx_policy_cancellations_status', 'policy_cancellations', ['status'], unique=False)
    op.create_index('idx_policy_cancellations_policy_id', 'policy_cancellations', ['policy_id'], unique=False)
    op.create_index('idx_policy_cancellations_effective_date', 'policy_cancellations', ['effective_date'], unique=False)
    op.create_table('roles',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('old_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('user_type', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('department', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('unit', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('access_level', sa.VARCHAR(length=20), server_default=sa.text("'standard'::character varying"), autoincrement=False, nullable=True),
    sa.Column('is_manager', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='pk_roles'),
    sa.UniqueConstraint('name', name='uq_roles_name', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_index('ux_roles_name', 'roles', ['name'], unique=True)
    op.create_table('report_analytics',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('template_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('report_instance_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('analytics_date', sa.DATE(), server_default=sa.text('CURRENT_DATE'), autoincrement=False, nullable=True),
    sa.Column('generation_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('view_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('download_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('share_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('average_generation_time_seconds', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('error_rate_percentage', sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=True),
    sa.Column('user_satisfaction_score', sa.NUMERIC(precision=3, scale=2), autoincrement=False, nullable=True),
    sa.Column('popular_filters', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True),
    sa.Column('performance_metrics', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.CheckConstraint('error_rate_percentage >= 0.0 AND error_rate_percentage <= 100.0', name='report_analytics_error_rate_percentage_check'),
    sa.CheckConstraint('user_satisfaction_score >= 1.0 AND user_satisfaction_score <= 5.0', name='report_analytics_user_satisfaction_score_check'),
    sa.ForeignKeyConstraint(['report_instance_id'], ['report_instances.id'], name='report_analytics_report_instance_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['template_id'], ['report_templates.id'], name='report_analytics_template_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='report_analytics_pkey')
    )
    op.create_table('voice_analytics',
    sa.Column('interaction_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('model_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('sentiment_score', sa.NUMERIC(precision=6, scale=4), autoincrement=False, nullable=True),
    sa.Column('emotion_analysis', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('stress_indicators', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('speech_patterns', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('language_complexity', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('caller_mood_progression', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('insights', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('analyzed_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('provider_contacts',
    sa.Column('provider_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('phone', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('email', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('position', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('is_primary', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('cpt_codes',
    sa.Column('code', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('premium_schedules',
    sa.Column('policy_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('billing_cycle_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('total_premium', sa.NUMERIC(precision=15, scale=2), autoincrement=False, nullable=False),
    sa.Column('installment_count', sa.INTEGER(), server_default=sa.text('1'), autoincrement=False, nullable=True),
    sa.Column('installment_amount', sa.NUMERIC(precision=15, scale=2), autoincrement=False, nullable=True),
    sa.Column('start_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('end_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=20), server_default=sa.text("'active'::character varying"), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('benefit_translations',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('benefit_schedule_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('language_code', sa.VARCHAR(length=5), autoincrement=False, nullable=False),
    sa.Column('translated_name', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('translated_description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('translated_disclaimer', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['benefit_schedule_id'], ['plan_benefit_schedules.id'], name='benefit_translations_benefit_schedule_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='benefit_translations_pkey'),
    sa.UniqueConstraint('benefit_schedule_id', 'language_code', name='benefit_translations_benefit_schedule_id_language_code_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    comment='Multilingual translations for benefit names and descriptions'
    )
    op.create_index('idx_benefit_translations_schedule_lang', 'benefit_translations', ['benefit_schedule_id', 'language_code'], unique=False)
    op.create_table('customer_lifecycle_stages',
    sa.Column('stage_name', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('stage_description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('stage_criteria', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('typical_duration_days', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('next_stages', postgresql.ARRAY(sa.INTEGER()), autoincrement=False, nullable=True),
    sa.Column('actions', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('decentralized_identities',
    sa.Column('member_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('did_identifier', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('did_document', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('verification_methods', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('service_endpoints', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('controllers', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True),
    sa.Column('created_timestamp', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('updated_timestamp', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('revoked', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('revocation_reason', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('blockchain_anchor', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('cards',
    sa.Column('card_number', sa.VARCHAR(length=30), autoincrement=False, nullable=False),
    sa.Column('policy_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('member_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('plan_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('company_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('effective_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('expiry_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), server_default=sa.text("'active'::character varying"), autoincrement=False, nullable=True),
    sa.Column('qr_code_data', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('qr_code_url', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('card_design_url', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('enabled', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('app_versions',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('platform', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('version_number', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('release_notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('release_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='app_versions_pkey')
    )
    op.create_table('api_keys',
    sa.Column('key_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('api_key_hash', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('permissions', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('rate_limit_per_hour', sa.INTEGER(), server_default=sa.text('1000'), autoincrement=False, nullable=True),
    sa.Column('expires_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('last_used', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('user_id_uuid', sa.UUID(), autoincrement=False, nullable=True)
    )
    op.create_table('benefit_preapproval_rules',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('benefit_schedule_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('provider_type', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('service_category', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('threshold_amount', sa.NUMERIC(precision=15, scale=2), autoincrement=False, nullable=True),
    sa.Column('threshold_type', sa.VARCHAR(length=20), server_default=sa.text("'amount'::character varying"), autoincrement=False, nullable=True),
    sa.Column('always_required', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('auto_approve_below_threshold', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('approval_workflow', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('effective_date', sa.DATE(), server_default=sa.text('CURRENT_DATE'), autoincrement=False, nullable=True),
    sa.Column('expiry_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['benefit_schedule_id'], ['plan_benefit_schedules.id'], name='benefit_preapproval_rules_benefit_schedule_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='benefit_preapproval_rules_pkey'),
    comment='Rules defining when preapproval is required for benefits'
    )
    op.create_table('customer_risk_profiles',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('customer_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('insurance_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('risk_score', sa.NUMERIC(precision=5, scale=2), server_default=sa.text('1.0'), autoincrement=False, nullable=True),
    sa.Column('risk_factors', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('medical_conditions', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('lifestyle_factors', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('occupation_risk_level', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('credit_based_insurance_score', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('last_assessed', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('data_requests',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('request_type', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('status', sa.TEXT(), server_default=sa.text("'pending'::text"), autoincrement=False, nullable=True),
    sa.Column('requested_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('processed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('performance_metrics',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('metric_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('metric_value', sa.NUMERIC(precision=15, scale=4), autoincrement=False, nullable=True),
    sa.Column('metric_unit', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('table_name', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('query_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('execution_time_ms', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('recorded_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='performance_metrics_pkey')
    )
    op.create_table('saas_plans',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('code', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('price', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('billing_cycle', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('max_users', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='saas_plans_pkey'),
    sa.UniqueConstraint('code', name='saas_plans_code_key', postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('simulation_results',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('scenario_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('simulation_run_id', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('run_started_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('run_completed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('computation_time_minutes', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('results_summary', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('detailed_results', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('confidence_metrics', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('sensitivity_analysis', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('risk_metrics', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('recommendations', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('validation_score', sa.NUMERIC(precision=3, scale=2), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['scenario_id'], ['simulation_scenarios.id'], name='simulation_results_scenario_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='simulation_results_pkey')
    )
    op.create_table('underwriting_rules',
    sa.Column('rule_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('product_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('rule_category', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('priority', sa.INTEGER(), server_default=sa.text('100'), autoincrement=False, nullable=True),
    sa.Column('conditions', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('actions', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('decision_outcome', postgresql.ENUM('accept', 'decline', 'refer', 'counter_offer', 'conditional_accept', name='underwriting_decision'), autoincrement=False, nullable=True),
    sa.Column('risk_score_impact', sa.NUMERIC(precision=5, scale=2), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('premium_adjustment_percentage', sa.NUMERIC(precision=5, scale=2), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('coverage_modifications', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('effective_from', sa.DATE(), server_default=sa.text('CURRENT_DATE'), autoincrement=False, nullable=True),
    sa.Column('effective_to', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('approved_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('condition_json', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('target_score', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('rule_type', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('applies_to', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('customer_lifetime_value',
    sa.Column('member_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('calculation_date', sa.DATE(), server_default=sa.text('CURRENT_DATE'), autoincrement=False, nullable=True),
    sa.Column('historical_value', sa.NUMERIC(precision=15, scale=2), autoincrement=False, nullable=True),
    sa.Column('predicted_value', sa.NUMERIC(precision=15, scale=2), autoincrement=False, nullable=True),
    sa.Column('total_ltv', sa.NUMERIC(precision=15, scale=2), autoincrement=False, nullable=True),
    sa.Column('confidence_interval', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('contributing_factors', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('model_version', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('valid_until', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('calculated_by', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('employee_skills',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('employee_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('skill_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('current_proficiency', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('proficiency_score', sa.NUMERIC(precision=3, scale=2), autoincrement=False, nullable=True),
    sa.Column('assessment_method', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('last_assessed', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('assessment_validity_months', sa.INTEGER(), server_default=sa.text('12'), autoincrement=False, nullable=True),
    sa.Column('development_priority', sa.VARCHAR(length=20), server_default=sa.text("'medium'::character varying"), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['skill_id'], ['skills_taxonomy.id'], name='employee_skills_skill_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='employee_skills_pkey')
    )
    op.create_table('parallel_scenarios',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('universe_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('scenario_name', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('scenario_number', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('decision_choices', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('environmental_assumptions', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('resource_allocations', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('risk_profile', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('expected_outcomes', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('success_probability', sa.NUMERIC(precision=3, scale=2), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['universe_id'], ['decision_universes.id'], name='parallel_scenarios_universe_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='parallel_scenarios_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('collections_logs',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('policy_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('invoice_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('member_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('collection_stage', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('days_overdue', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('outstanding_amount', sa.NUMERIC(precision=15, scale=2), autoincrement=False, nullable=False),
    sa.Column('action_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('communication_channel', sa.VARCHAR(length=30), autoincrement=False, nullable=True),
    sa.Column('communication_sent_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('message_template_used', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('personalized_message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('recipient_contact_info', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('member_responded', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('response_received_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('response_type', sa.VARCHAR(length=30), autoincrement=False, nullable=True),
    sa.Column('response_details', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('payment_received', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('payment_amount', sa.NUMERIC(precision=15, scale=2), autoincrement=False, nullable=True),
    sa.Column('payment_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('payment_method', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('next_action_scheduled', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('next_action_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('escalation_required', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('escalation_reason', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('collection_status', sa.VARCHAR(length=30), server_default=sa.text("'active'::character varying"), autoincrement=False, nullable=True),
    sa.Column('resolution_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('resolution_notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.CheckConstraint("action_type::text = ANY (ARRAY['email_reminder'::character varying, 'sms_reminder'::character varying, 'phone_call'::character varying, 'postal_letter'::character varying, 'legal_referral'::character varying, 'payment_plan_setup'::character varying]::text[])", name='valid_action_type'),
    sa.CheckConstraint("collection_stage::text = ANY (ARRAY['first_reminder'::character varying, 'second_reminder'::character varying, 'final_notice'::character varying, 'pre_legal'::character varying, 'legal_action'::character varying, 'debt_collection'::character varying]::text[])", name='valid_collection_stage'),
    sa.CheckConstraint('outstanding_amount > 0::numeric AND (payment_amount IS NULL OR payment_amount >= 0::numeric)', name='valid_amounts'),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name='collections_logs_created_by_fkey'),
    sa.ForeignKeyConstraint(['invoice_id'], ['premium_invoices.id'], name='collections_logs_invoice_id_fkey', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['invoice_id'], ['premium_invoices.id'], name='fk_collections_invoice', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['member_id'], ['members.id'], name='collections_logs_member_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['policy_id'], ['policies.id'], name='collections_logs_policy_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['updated_by'], ['users.id'], name='collections_logs_updated_by_fkey'),
    sa.PrimaryKeyConstraint('id', name='collections_logs_pkey'),
    comment='Payment collection activities and member follow-up tracking'
    )
    op.create_index('idx_collections_logs_status', 'collections_logs', ['collection_status'], unique=False)
    op.create_index('idx_collections_logs_policy_id', 'collections_logs', ['policy_id'], unique=False)
    op.create_index('idx_collections_logs_overdue', 'collections_logs', [sa.text('days_overdue DESC')], unique=False)
    op.create_index('idx_collections_logs_next_action', 'collections_logs', ['next_action_date'], unique=False)
    op.create_table('risk_assessments',
    sa.Column('entity_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('entity_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('assessment_date', sa.DATE(), server_default=sa.text('CURRENT_DATE'), autoincrement=False, nullable=True),
    sa.Column('overall_risk_score', sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=True),
    sa.Column('risk_level', postgresql.ENUM('very_low', 'low', 'medium', 'high', 'very_high', 'critical', name='risk_level'), autoincrement=False, nullable=True),
    sa.Column('risk_factors', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('assessment_method', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('valid_until', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('assessed_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('factors', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('support_response_templates',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('category_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('title', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('body', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('language', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['category_id'], ['ticket_categories.id'], name='support_response_templates_category_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='support_response_templates_pkey')
    )
    op.create_table('universe_outcomes',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('scenario_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('simulation_completed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('financial_outcomes', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('operational_outcomes', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('risk_outcomes', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('strategic_outcomes', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('stakeholder_impact', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('unintended_consequences', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('overall_success_score', sa.NUMERIC(precision=3, scale=2), autoincrement=False, nullable=True),
    sa.Column('confidence_level', sa.NUMERIC(precision=3, scale=2), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['scenario_id'], ['parallel_scenarios.id'], name='universe_outcomes_scenario_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='universe_outcomes_pkey')
    )
    op.create_table('plan_exclusion_links',
    sa.Column('plan_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('exclusion_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('provider_types',
    sa.Column('code', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('label', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('category', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('icon', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.CheckConstraint("category::text = ANY (ARRAY['medical'::character varying::text, 'motor'::character varying::text])", name='provider_types_category_check')
    )
    op.create_table('user_roles',
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('role_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('company_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('department_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('unit_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['company_id'], ['companies.id'], name='fk_user_roles_company_id', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['department_id'], ['departments.id'], name='fk_user_roles_department_id', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['role_id'], ['roles.id'], name='fk_user_roles_role_id', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['unit_id'], ['units.id'], name='fk_user_roles_unit_id', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='fk_user_roles_user_id', ondelete='CASCADE')
    )
    op.create_index('ux_user_roles_scope', 'user_roles', ['user_id', 'role_id', sa.text("COALESCE(company_id, '00000000-0000-0000-0000-000000000000'::uuid)"), sa.text("COALESCE(department_id, '00000000-0000-0000-0000-000000000000'::uuid)"), sa.text("COALESCE(unit_id, '00000000-0000-0000-0000-000000000000'::uuid)")], unique=True)
    op.create_index('ix_user_roles_unit_id', 'user_roles', ['unit_id'], unique=False)
    op.create_index('ix_user_roles_department_id', 'user_roles', ['department_id'], unique=False)
    op.create_index('ix_user_roles_company_id', 'user_roles', ['company_id'], unique=False)
    op.create_table('benefit_conditions',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('benefit_schedule_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('condition_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('condition_operator', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('condition_value', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('condition_group', sa.VARCHAR(length=50), server_default=sa.text("'default'::character varying"), autoincrement=False, nullable=True),
    sa.Column('group_operator', sa.VARCHAR(length=10), server_default=sa.text("'AND'::character varying"), autoincrement=False, nullable=True),
    sa.Column('priority_order', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['benefit_schedule_id'], ['plan_benefit_schedules.id'], name='benefit_conditions_benefit_schedule_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='benefit_conditions_pkey'),
    comment='Conditions that apply to specific benefits (age, gender, diagnosis, etc.)'
    )
    op.create_index('idx_benefit_conditions_schedule_id', 'benefit_conditions', ['benefit_schedule_id'], unique=False)
    op.create_table('broker_assignments',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('broker_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('company_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('group_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('policy_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('assignment_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('effective_date', sa.DATE(), server_default=sa.text('CURRENT_DATE'), autoincrement=False, nullable=True),
    sa.Column('expiry_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['broker_id'], ['brokers.id'], name='broker_assignments_broker_id_fkey'),
    sa.ForeignKeyConstraint(['company_id'], ['companies.id'], name='broker_assignments_company_id_fkey'),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name='broker_assignments_created_by_fkey'),
    sa.ForeignKeyConstraint(['group_id'], ['groups.id'], name='broker_assignments_group_id_fkey'),
    sa.ForeignKeyConstraint(['policy_id'], ['policies.id'], name='broker_assignments_policy_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='broker_assignments_pkey')
    )
    op.create_index('idx_broker_assignments_broker', 'broker_assignments', ['broker_id'], unique=False)
    op.create_table('customer_journey_touchpoints',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('customer_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('touchpoint_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('channel', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('interaction_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('sentiment_score', sa.NUMERIC(precision=3, scale=2), autoincrement=False, nullable=True),
    sa.Column('conversion_event', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('touchpoint_timestamp', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='customer_journey_touchpoints_pkey')
    )
    op.create_table('document_public_tokens',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('document_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('public_token', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('qr_code_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('expires_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('usage_limit', sa.INTEGER(), server_default=sa.text('1'), autoincrement=False, nullable=True),
    sa.Column('access_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('qr_style_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['document_id'], ['documents.id'], name='document_public_tokens_document_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['qr_style_id'], ['qr_styles.id'], name='document_public_tokens_qr_style_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='document_public_tokens_pkey'),
    sa.UniqueConstraint('public_token', name='document_public_tokens_public_token_key', postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index('idx_doc_public_tokens_doc', 'document_public_tokens', ['document_id'], unique=False)
    op.create_table('underwriting_decision_matrix',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('factor_1', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('factor_2', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('score', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('decision', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('weight', sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.CheckConstraint("decision = ANY (ARRAY['accept'::text, 'reject'::text, 'manual_review'::text])", name='underwriting_decision_matrix_decision_check')
    )
    op.create_table('group_demographics',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('quotation_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('age_bracket_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('member_count', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.CheckConstraint('member_count >= 0', name='group_demographics_member_count_check')
    )
    op.create_table('public_card_views',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('card_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('card_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('public_token', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('qr_code_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('expires_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('qr_style_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['qr_style_id'], ['qr_styles.id'], name='public_card_views_qr_style_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='public_card_views_pkey'),
    sa.UniqueConstraint('public_token', name='public_card_views_public_token_key', postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('marketing_campaigns',
    sa.Column('campaign_name', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('campaign_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('channel', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('target_segment_ids', postgresql.ARRAY(sa.INTEGER()), autoincrement=False, nullable=True),
    sa.Column('start_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('end_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('budget', sa.NUMERIC(precision=15, scale=2), autoincrement=False, nullable=True),
    sa.Column('currency', sa.VARCHAR(length=3), server_default=sa.text("'USD'::character varying"), autoincrement=False, nullable=True),
    sa.Column('target_audience_size', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('inclusion_criteria', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('exclusion_criteria', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('campaign_assets', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('a_b_test_variants', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=30), server_default=sa.text("'planning'::character varying"), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('fiscal_periods',
    sa.Column('period_name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('start_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('end_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('is_closed', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('ar_vr_applications',
    sa.Column('app_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('platform_type', sa.VARCHAR(length=30), autoincrement=False, nullable=True),
    sa.Column('use_case', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('supported_devices', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('minimum_specifications', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('app_version', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('download_url', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('features', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('pricing_model', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('is_production_ready', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('external_service_status',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('service_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('service_category', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('endpoint_url', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('check_method', sa.VARCHAR(length=10), server_default=sa.text("'GET'::character varying"), autoincrement=False, nullable=True),
    sa.Column('expected_status_code', sa.INTEGER(), server_default=sa.text('200'), autoincrement=False, nullable=True),
    sa.Column('timeout_seconds', sa.INTEGER(), server_default=sa.text('30'), autoincrement=False, nullable=True),
    sa.Column('current_status', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('last_check_timestamp', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('response_time_ms', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('uptime_percentage', sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=True),
    sa.Column('avg_response_time_ms', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('error_rate', sa.NUMERIC(precision=5, scale=4), autoincrement=False, nullable=True),
    sa.Column('alert_threshold_ms', sa.INTEGER(), server_default=sa.text('5000'), autoincrement=False, nullable=True),
    sa.Column('consecutive_failures', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('alert_sent', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('last_alert_sent', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('business_criticality', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('affected_features', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('fallback_available', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('fallback_service', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('skills_development_plans',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('employee_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('gap_analysis_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('target_skills', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('development_methods', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('estimated_duration_months', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('estimated_cost', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('priority_ranking', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('success_metrics', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('progress_milestones', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('assigned_mentor', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('plan_status', sa.VARCHAR(length=30), server_default=sa.text("'proposed'::character varying"), autoincrement=False, nullable=True),
    sa.Column('start_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('target_completion_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('actual_completion_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('effectiveness_rating', sa.NUMERIC(precision=3, scale=2), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['gap_analysis_id'], ['skills_gap_analysis.id'], name='skills_development_plans_gap_analysis_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='skills_development_plans_pkey')
    )
    op.create_table('data_quality_rules',
    sa.Column('rule_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('table_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('column_name', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('rule_type', sa.VARCHAR(length=30), autoincrement=False, nullable=True),
    sa.Column('rule_definition', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('severity', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('threshold_percentage', sa.NUMERIC(precision=5, scale=2), server_default=sa.text('95.0'), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('sessions',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('ip_address', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('device', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('last_active_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='sessions_pkey')
    )
    op.create_table('policy_versions',
    sa.Column('policy_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('version_number', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('change_reason', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('changes', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('general_ledger_accounts',
    sa.Column('code', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('category', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.CheckConstraint("category = ANY (ARRAY['asset'::text, 'liability'::text, 'income'::text, 'expense'::text, 'equity'::text])", name='general_ledger_accounts_category_check')
    )
    op.create_table('custom_fields',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('entity_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('label', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('field_type', sa.VARCHAR(length=50), server_default=sa.text("'text'::character varying"), autoincrement=False, nullable=True),
    sa.Column('is_required', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='custom_fields_pkey')
    )
    op.create_index('idx_custom_fields_entity_type', 'custom_fields', ['entity_type'], unique=False)
    op.create_table('member_persona_mapping',
    sa.Column('member_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('persona_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('confidence_score', sa.NUMERIC(precision=5, scale=4), autoincrement=False, nullable=True),
    sa.Column('assignment_date', sa.DATE(), server_default=sa.text('CURRENT_DATE'), autoincrement=False, nullable=True),
    sa.Column('assignment_method', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('persona_evolution_history', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('last_updated', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('brokers',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('broker_code', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('broker_name', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('contact_person', sa.VARCHAR(length=150), autoincrement=False, nullable=True),
    sa.Column('email', sa.VARCHAR(length=150), autoincrement=False, nullable=True),
    sa.Column('phone', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('address', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('license_number', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('license_expiry', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name='brokers_created_by_fkey'),
    sa.ForeignKeyConstraint(['updated_by'], ['users.id'], name='brokers_updated_by_fkey'),
    sa.PrimaryKeyConstraint('id', name='brokers_pkey'),
    sa.UniqueConstraint('broker_code', name='brokers_broker_code_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    comment='Insurance broker/agent master data'
    )
    op.create_index('idx_brokers_active', 'brokers', ['is_active'], unique=False, postgresql_where='(is_active = true)')
    op.create_table('provider_claims',
    sa.Column('provider_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('claim_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('handled_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('forecasts',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('model_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('entity_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('entity_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('forecast_timestamp', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('predicted_value', sa.NUMERIC(precision=20, scale=8), autoincrement=False, nullable=True),
    sa.Column('confidence_lower', sa.NUMERIC(precision=20, scale=8), autoincrement=False, nullable=True),
    sa.Column('confidence_upper', sa.NUMERIC(precision=20, scale=8), autoincrement=False, nullable=True),
    sa.Column('prediction_interval', sa.NUMERIC(precision=3, scale=2), autoincrement=False, nullable=True),
    sa.Column('influencing_factors', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('scenario_assumptions', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('generated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('actual_value', sa.NUMERIC(precision=20, scale=8), autoincrement=False, nullable=True),
    sa.Column('forecast_accuracy', sa.NUMERIC(precision=5, scale=4), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('knowledge_categories',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('parent_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['parent_id'], ['knowledge_categories.id'], name='knowledge_categories_parent_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='knowledge_categories_pkey')
    )
    op.create_table('regulatory_frameworks',
    sa.Column('framework_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('jurisdiction', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('regulator', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('version', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('effective_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('reporting_requirements', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('group_admins',
    sa.Column('group_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('user_id_uuid', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('competitor_intelligence',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('competitor_name', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('intelligence_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('intelligence_summary', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('data_sources', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('credibility_score', sa.NUMERIC(precision=3, scale=2), autoincrement=False, nullable=True),
    sa.Column('competitive_threat_level', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('potential_customer_impact', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('recommended_response', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('monitoring_priority', sa.VARCHAR(length=20), server_default=sa.text("'normal'::character varying"), autoincrement=False, nullable=True),
    sa.Column('intelligence_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('follow_up_required', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='competitor_intelligence_pkey')
    )
    op.create_table('login_devices',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('device_fingerprint', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('user_agent', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('ip_address', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('last_used_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('is_trusted', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='login_devices_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='login_devices_pkey')
    )
    op.create_table('process_instances',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('process_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('instance_name', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=30), server_default=sa.text("'running'::character varying"), autoincrement=False, nullable=True),
    sa.Column('current_step', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('input_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('context_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('priority', sa.VARCHAR(length=20), server_default=sa.text("'normal'::character varying"), autoincrement=False, nullable=True),
    sa.Column('assigned_to', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('started_by', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('started_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('completed_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('sla_due_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('financial_periods',
    sa.Column('company_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('period_name', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('period_type', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('start_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('end_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=20), server_default=sa.text("'open'::character varying"), autoincrement=False, nullable=True),
    sa.Column('closed_by', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('closed_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('faq_entries',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('question', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('answer', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('category', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('language', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='faq_entries_pkey')
    )
    op.create_table('saas_feature_flags',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('code', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='saas_feature_flags_pkey'),
    sa.UniqueConstraint('code', name='saas_feature_flags_code_key', postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('journal_entries',
    sa.Column('entry_number', sa.VARCHAR(length=30), autoincrement=False, nullable=False),
    sa.Column('company_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('period_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('entry_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('reference_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('reference_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('total_debit', sa.NUMERIC(precision=15, scale=2), autoincrement=False, nullable=False),
    sa.Column('total_credit', sa.NUMERIC(precision=15, scale=2), autoincrement=False, nullable=False),
    sa.Column('currency', sa.VARCHAR(length=3), server_default=sa.text("'USD'::character varying"), autoincrement=False, nullable=True),
    sa.Column('exchange_rate', sa.NUMERIC(precision=10, scale=6), server_default=sa.text('1.0'), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), server_default=sa.text("'draft'::character varying"), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('approved_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('posted_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('policy_dependents',
    sa.Column('policy_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('full_name', sa.VARCHAR(length=150), autoincrement=False, nullable=True),
    sa.Column('date_of_birth', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('relation', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('gender', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('national_id', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('customer_segment_analytics',
    sa.Column('segment_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('analysis_period_start', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('analysis_period_end', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('total_customers', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('new_customers', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('churned_customers', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('net_growth', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('total_revenue', sa.NUMERIC(precision=15, scale=2), autoincrement=False, nullable=True),
    sa.Column('revenue_per_customer', sa.NUMERIC(precision=15, scale=2), autoincrement=False, nullable=True),
    sa.Column('profit_margin', sa.NUMERIC(precision=5, scale=4), autoincrement=False, nullable=True),
    sa.Column('customer_acquisition_cost', sa.NUMERIC(precision=15, scale=2), autoincrement=False, nullable=True),
    sa.Column('avg_session_duration', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('avg_sessions_per_customer', sa.NUMERIC(precision=8, scale=4), autoincrement=False, nullable=True),
    sa.Column('feature_adoption_rates', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('support_ticket_rate', sa.NUMERIC(precision=8, scale=6), autoincrement=False, nullable=True),
    sa.Column('churn_risk_distribution', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('upsell_opportunity_score', sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=True),
    sa.Column('cross_sell_propensity', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('calculated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('entities',
    sa.Column('company_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('entity_type_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('code', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('registration_number', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('email', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('phone', sa.VARCHAR(length=30), autoincrement=False, nullable=True),
    sa.Column('contact_person', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('contact_position', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('address_line', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('city_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('region_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('country_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('postal_code', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('latitude', sa.NUMERIC(precision=9, scale=6), autoincrement=False, nullable=True),
    sa.Column('longitude', sa.NUMERIC(precision=9, scale=6), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('is_blacklisted', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('billing_cycles',
    sa.Column('cycle_name', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('cycle_months', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('audit_logs_template',
    sa.Column('table_name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('record_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('action', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('performed_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('old_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('new_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.CheckConstraint("action = ANY (ARRAY['insert'::text, 'update'::text, 'delete'::text])", name='audit_logs_action_check')
    )
    op.create_table('benefit_alert_logs',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('member_benefit_usage_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('member_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('alert_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('threshold_percentage', sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=True),
    sa.Column('alert_message', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('alert_message_ar', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('delivery_channels', postgresql.ARRAY(sa.VARCHAR(length=100)), autoincrement=False, nullable=True),
    sa.Column('sent_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('email_sent', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('sms_sent', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('push_sent', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('portal_notification_sent', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('member_acknowledged', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('acknowledged_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('member_response', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('alert_status', sa.VARCHAR(length=30), server_default=sa.text("'pending'::character varying"), autoincrement=False, nullable=True),
    sa.Column('expires_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.CheckConstraint("alert_type::text = ANY (ARRAY['threshold_50'::character varying, 'threshold_80'::character varying, 'threshold_90'::character varying, 'exhausted'::character varying, 'renewal_reminder'::character varying, 'limit_increase_available'::character varying]::text[])", name='valid_alert_type'),
    sa.ForeignKeyConstraint(['member_benefit_usage_id'], ['member_benefit_usage.id'], name='benefit_alert_logs_member_benefit_usage_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['member_id'], ['members.id'], name='benefit_alert_logs_member_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='benefit_alert_logs_pkey'),
    comment='Log of all benefit-related alerts sent to members'
    )
    op.create_index('idx_benefit_alert_logs_sent_at', 'benefit_alert_logs', [sa.text('sent_at DESC')], unique=False)
    op.create_index('idx_benefit_alert_logs_member_id', 'benefit_alert_logs', ['member_id'], unique=False)
    op.create_index('idx_benefit_alert_logs_alert_type', 'benefit_alert_logs', ['alert_type'], unique=False)
    op.create_table('cms_pages',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('slug', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('title', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('body', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='cms_pages_pkey'),
    sa.UniqueConstraint('slug', name='cms_pages_slug_key', postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('external_field_mappings',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('integration_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('internal_table', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('internal_field', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('external_field', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('data_type', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('transformation_rule', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['integration_id'], ['external_services.id'], name='external_field_mappings_integration_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='external_field_mappings_pkey')
    )
    op.create_table('real_time_recommendations',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('member_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('model_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('session_id', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('recommendation_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('recommended_items', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('confidence_scores', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('explanation', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('context_factors', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('presented', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('clicked', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('converted', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('feedback_score', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('generated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('provider_ratings',
    sa.Column('provider_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('member_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('rating', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('comment', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.CheckConstraint('rating >= 1 AND rating <= 5', name='provider_ratings_rating_check')
    )
    op.create_table('iot_device_types',
    sa.Column('device_type_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('category', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('manufacturer', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('model_name', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('connectivity_protocol', sa.VARCHAR(length=30), autoincrement=False, nullable=True),
    sa.Column('data_transmission_frequency', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('battery_life_hours', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('environmental_rating', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('sensor_capabilities', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('security_features', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('cost_usd', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='iot_device_types_pkey')
    )
    op.create_table('idempotency_keys',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('idem_key', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('request_fingerprint', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('locked_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('recovery_point', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('response_code', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('response_body', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('expires_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text("(now() + '36:00:00'::interval)"), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='idempotency_keys_pkey'),
    sa.UniqueConstraint('idem_key', name='idempotency_keys_idem_key_key', postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index('idx_idem_expires', 'idempotency_keys', ['expires_at'], unique=False)
    op.create_table('aggregate_covers',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('agreement_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('cover_name', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('cover_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('attachment_point', sa.NUMERIC(precision=15, scale=2), autoincrement=False, nullable=False),
    sa.Column('limit_amount', sa.NUMERIC(precision=15, scale=2), autoincrement=False, nullable=False),
    sa.Column('premium', sa.NUMERIC(precision=15, scale=2), autoincrement=False, nullable=True),
    sa.Column('premium_percentage', sa.NUMERIC(precision=8, scale=4), autoincrement=False, nullable=True),
    sa.Column('cover_period_start', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('cover_period_end', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('reinstatements', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('reinstatement_premium_percentage', sa.NUMERIC(precision=8, scale=4), autoincrement=False, nullable=True),
    sa.Column('subject_business', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('exclusions', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('geographical_scope', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('currency', sa.VARCHAR(length=3), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), server_default=sa.text("'active'::character varying"), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['agreement_id'], ['reinsurance_agreements.id'], name='fk_aggregate_covers_agreement', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name='aggregate_covers_pkey'),
    comment='Aggregate stop loss and excess covers for reinsurance'
    )
    op.create_index('idx_aggregate_covers_agreement', 'aggregate_covers', ['agreement_id'], unique=False)
    op.create_table('prediction_batch_jobs',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('job_name', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('model_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('schedule_expression', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('target_entities', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('job_status', sa.VARCHAR(length=30), server_default=sa.text("'scheduled'::character varying"), autoincrement=False, nullable=True),
    sa.Column('last_run_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('next_run_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('results_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('execution_time_seconds', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['model_id'], ['prediction_models.id'], name='prediction_batch_jobs_model_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='prediction_batch_jobs_pkey')
    )
    op.create_table('digital_twin_models',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('model_name', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('twin_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('model_scope', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('simulation_engine', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('model_parameters', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('calibration_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('validation_metrics', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('update_frequency', sa.VARCHAR(length=20), server_default=sa.text("'daily'::character varying"), autoincrement=False, nullable=True),
    sa.Column('computational_complexity', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('is_production_ready', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='digital_twin_models_pkey')
    )
    op.create_table('report_components',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('component_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('component_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('component_category', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('component_config', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True),
    sa.Column('default_settings', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True),
    sa.Column('data_binding_schema', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True),
    sa.Column('styling_options', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True),
    sa.Column('icon_url', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.CheckConstraint("component_type::text = ANY (ARRAY['chart'::character varying, 'table'::character varying, 'kpi_card'::character varying, 'filter'::character varying, 'text'::character varying, 'image'::character varying, 'gauge'::character varying, 'map'::character varying]::text[])", name='report_components_component_type_check'),
    sa.PrimaryKeyConstraint('id', name='report_components_pkey'),
    sa.UniqueConstraint('component_name', name='report_components_component_name_key', postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('model_versions',
    sa.Column('model_name', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('version', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('parent_version', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('architecture_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('framework', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('model_size_mb', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('parameter_count', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('training_dataset_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('hyperparameters', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('training_duration_minutes', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('training_cost', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('compute_resources', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('training_metrics', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('validation_metrics', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('test_metrics', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('benchmark_results', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('model_file_path', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('model_hash', sa.VARCHAR(length=64), autoincrement=False, nullable=True),
    sa.Column('checkpoint_paths', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('export_formats', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('deployment_status', sa.VARCHAR(length=30), server_default=sa.text("'experimental'::character varying"), autoincrement=False, nullable=True),
    sa.Column('deployment_config', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('api_endpoint', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('inference_cost_per_request', sa.NUMERIC(precision=10, scale=6), autoincrement=False, nullable=True),
    sa.Column('drift_detection_enabled', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('performance_threshold', sa.NUMERIC(precision=5, scale=4), autoincrement=False, nullable=True),
    sa.Column('retraining_trigger_conditions', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('bias_testing_results', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('fairness_metrics', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('explainability_support', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('approved_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('climate_scenarios',
    sa.Column('scenario_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('temperature_increase_celsius', sa.NUMERIC(precision=4, scale=2), autoincrement=False, nullable=True),
    sa.Column('time_horizon_years', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('probability_percentage', sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=True),
    sa.Column('scenario_description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('source_organization', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('last_updated', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('scenario_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('archived_policies',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('original_policy_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('policy_number', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('policy_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('related_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('archival_reason', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('archived_by', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('retention_period_years', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('legal_hold', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('legal_hold_reason', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('destruction_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('access_level', sa.VARCHAR(length=30), server_default=sa.text("'restricted'::character varying"), autoincrement=False, nullable=True),
    sa.Column('last_accessed', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('access_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('data_hash', sa.VARCHAR(length=64), autoincrement=False, nullable=True),
    sa.Column('compression_ratio', sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=True),
    sa.Column('search_keywords', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True),
    sa.Column('business_tags', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('user_preferences',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('member_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('preference_category', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('preference_key', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('preference_value', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.CheckConstraint('user_id IS NOT NULL AND member_id IS NULL OR user_id IS NULL AND member_id IS NOT NULL', name='check_user_or_member'),
    sa.ForeignKeyConstraint(['member_id'], ['members.id'], name='user_preferences_member_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='user_preferences_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='user_preferences_pkey'),
    comment='User and member portal preference settings'
    )
    op.create_index('idx_user_preferences_user', 'user_preferences', ['user_id', 'preference_category', 'preference_key'], unique=True, postgresql_where='(user_id IS NOT NULL)')
    op.create_index('idx_user_preferences_member', 'user_preferences', ['member_id', 'preference_category', 'preference_key'], unique=True, postgresql_where='(member_id IS NOT NULL)')
    op.create_table('policy_endorsements',
    sa.Column('policy_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('change_type', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('old_value', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('new_value', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('approved_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('chaos_experiment_runs',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('experiment_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('run_started_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('run_completed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('run_status', sa.VARCHAR(length=30), autoincrement=False, nullable=True),
    sa.Column('chaos_applied_successfully', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('system_impact_metrics', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('resilience_score', sa.NUMERIC(precision=3, scale=2), autoincrement=False, nullable=True),
    sa.Column('issues_discovered', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('recovery_time_seconds', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('success_criteria_met', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('lessons_learned', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('improvements_identified', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('follow_up_actions', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('executed_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['experiment_id'], ['chaos_experiments.id'], name='chaos_experiment_runs_experiment_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='chaos_experiment_runs_pkey')
    )
    op.create_table('departments',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('code', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('parent_department_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('company_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['company_id'], ['companies.id'], name='departments_company_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['parent_department_id'], ['departments.id'], name='departments_parent_department_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='departments_pkey'),
    sa.UniqueConstraint('company_id', 'code', name='uq_departments_company_code', postgresql_include=[], postgresql_nulls_not_distinct=False),
    sa.UniqueConstraint('company_id', 'name', name='uq_departments_company_name', postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index('idx_departments_company_id', 'departments', ['company_id'], unique=False)
    op.create_table('roles_backup',
    sa.Column('name', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('status_logs',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('entity_type', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('entity_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('previous_status', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('new_status', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('changed_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('changed_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True)
    )
    op.create_table('underwriting_profiles',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('member_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('policy_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('plan_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('quote_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('risk_score', sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=True),
    sa.Column('decision', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.CheckConstraint("decision = ANY (ARRAY['approved'::text, 'referred'::text, 'rejected'::text, 'pending'::text])", name='underwriting_profiles_decision_check')
    )
    op.create_table('quotation_items',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('quotation_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('coverage_name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('coverage_name_ar', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('limit_amount', sa.NUMERIC(precision=12, scale=2), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('notes_ar', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('display_order', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('meta_data', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('financial_accounts',
    sa.Column('account_code', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('account_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('account_type', sa.VARCHAR(length=30), autoincrement=False, nullable=True),
    sa.Column('parent_account_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('normal_balance', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('company_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('login_sessions',
    sa.Column('user_type', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('device_info', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('ip_address', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('started_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('ended_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('user_id_uuid', sa.UUID(), autoincrement=False, nullable=True),
    sa.CheckConstraint("user_type = ANY (ARRAY['admin'::text, 'member'::text, 'garage'::text, 'broker'::text])", name='login_sessions_user_type_check')
    )
    op.create_table('treaty_types',
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('regulatory_reports',
    sa.Column('report_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('framework_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('report_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('company_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('reporting_period_start', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('reporting_period_end', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('due_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('filing_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=30), server_default=sa.text("'draft'::character varying"), autoincrement=False, nullable=True),
    sa.Column('report_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('validation_results', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('submission_reference', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('prepared_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('reviewed_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('submitted_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('prediction_results',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('model_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('entity_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('entity_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('prediction_value', sa.NUMERIC(precision=15, scale=4), autoincrement=False, nullable=True),
    sa.Column('confidence_score', sa.NUMERIC(precision=3, scale=2), autoincrement=False, nullable=True),
    sa.Column('prediction_factors', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('prediction_date', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('actual_outcome', sa.NUMERIC(precision=15, scale=4), autoincrement=False, nullable=True),
    sa.Column('prediction_accuracy', sa.NUMERIC(precision=5, scale=4), autoincrement=False, nullable=True),
    sa.Column('feedback_provided', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['model_id'], ['prediction_models.id'], name='prediction_results_model_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='prediction_results_pkey')
    )
    op.create_table('quotation_pricing_rules_history',
    sa.Column('history_id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('rule_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('operation', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('changed_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('changed_by', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('old_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('new_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.CheckConstraint("operation::text = ANY (ARRAY['INSERT'::character varying::text, 'UPDATE'::character varying::text, 'DELETE'::character varying::text])", name='quotation_pricing_rules_history_operation_check')
    )
    op.create_table('premium_copayment',
    sa.Column('uuid', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=True),
    sa.Column('pricing_profile_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('service_type', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('amount', sa.NUMERIC(precision=12, scale=2), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.CheckConstraint('amount >= 0::numeric', name='premium_copayment_amount_check')
    )
    op.create_table('claim_checklists',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('claim_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('checklist_item', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('is_mandatory', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('display_order', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name='claim_checklists_created_by_fkey'),
    sa.PrimaryKeyConstraint('id', name='claim_checklists_pkey')
    )
    op.create_table('smart_home_systems',
    sa.Column('member_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('property_address', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('system_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('brand', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('model', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('installation_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('monitoring_plan', sa.VARCHAR(length=30), autoincrement=False, nullable=True),
    sa.Column('monthly_fee', sa.NUMERIC(precision=8, scale=2), autoincrement=False, nullable=True),
    sa.Column('emergency_contacts', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('integration_status', sa.VARCHAR(length=30), autoincrement=False, nullable=True),
    sa.Column('api_credentials', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('skills_demand_forecast',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('skill_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('forecast_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('forecast_horizon_years', sa.INTEGER(), server_default=sa.text('3'), autoincrement=False, nullable=True),
    sa.Column('demand_trend', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('demand_growth_rate', sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=True),
    sa.Column('industry_demand_score', sa.NUMERIC(precision=3, scale=2), autoincrement=False, nullable=True),
    sa.Column('automation_threat_level', sa.VARCHAR(length=20), server_default=sa.text("'low'::character varying"), autoincrement=False, nullable=True),
    sa.Column('emergence_factors', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('confidence_level', sa.NUMERIC(precision=3, scale=2), autoincrement=False, nullable=True),
    sa.Column('data_sources', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('forecast_model', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['skill_id'], ['skills_taxonomy.id'], name='skills_demand_forecast_skill_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='skills_demand_forecast_pkey')
    )
    op.create_table('integration_logs',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('integration_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('endpoint_url', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('http_method', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('request_headers', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('request_body', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('request_size_bytes', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('response_status_code', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('response_headers', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('response_body', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('response_size_bytes', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('response_time_ms', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('error_code', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('retry_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('business_transaction_id', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('correlation_id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=True),
    sa.Column('contains_pii', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('data_classification', sa.VARCHAR(length=30), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('user_id_uuid', sa.UUID(), autoincrement=False, nullable=True)
    )
    op.create_table('provider_availability_exceptions',
    sa.Column('provider_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('exception_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('reason', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_closed', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('speech_analytics_models',
    sa.Column('model_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('analysis_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('language_support', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True),
    sa.Column('model_accuracy', sa.NUMERIC(precision=5, scale=4), autoincrement=False, nullable=True),
    sa.Column('real_time_processing', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('api_endpoint', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('cost_per_minute', sa.NUMERIC(precision=8, scale=4), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('business_processes',
    sa.Column('process_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('process_category', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('version', sa.VARCHAR(length=20), server_default=sa.text("'1.0'::character varying"), autoincrement=False, nullable=True),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('process_definition', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('input_requirements', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('output_specifications', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('sla_hours', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('escalation_rules', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('approved_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('actuarial_tables',
    sa.Column('table_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('table_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('version', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('effective_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('expiry_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('geographic_scope', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('demographic_scope', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('table_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('data_source', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('regulatory_approval', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('approved_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('bordereau_reports',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('agreement_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('report_period_start', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('report_period_end', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('report_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('total_premium', sa.NUMERIC(precision=15, scale=2), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('total_claims', sa.NUMERIC(precision=15, scale=2), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('ceded_premium', sa.NUMERIC(precision=15, scale=2), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('ceded_claims', sa.NUMERIC(precision=15, scale=2), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('commission', sa.NUMERIC(precision=15, scale=2), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('profit_commission', sa.NUMERIC(precision=15, scale=2), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('balance_due', sa.NUMERIC(precision=15, scale=2), autoincrement=False, nullable=True),
    sa.Column('report_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('submission_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('due_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), server_default=sa.text("'draft'::character varying"), autoincrement=False, nullable=True),
    sa.Column('submitted_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('acknowledged_by_reinsurer', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('acknowledgment_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('disputes', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['agreement_id'], ['reinsurance_agreements.id'], name='fk_bordereau_reports_agreement', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name='bordereau_reports_pkey'),
    comment='Detailed reporting to reinsurers on ceded business'
    )
    op.create_index('idx_bordereau_reports_agreement', 'bordereau_reports', ['agreement_id', 'report_period_start'], unique=False)
    op.create_table('benefit_categories',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('code', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('name_ar', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('description_ar', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('icon', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('display_order', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='benefit_categories_pkey'),
    sa.UniqueConstraint('code', name='benefit_categories_code_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    comment='Categories for organizing insurance benefits (Medical, Dental, etc.)'
    )
    op.create_table('quotation_pricing_rule_age_brackets',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('rule_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('age_bracket_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('multiplier', sa.NUMERIC(precision=8, scale=4), server_default=sa.text('1.0'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('locales',
    sa.Column('locale_code', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('language_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('country_code', sa.VARCHAR(length=2), autoincrement=False, nullable=True),
    sa.Column('currency_code', sa.VARCHAR(length=3), autoincrement=False, nullable=True),
    sa.Column('date_format', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('time_format', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('number_format', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('is_default', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('quotation_audit_log',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('quotation_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('action_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('action_details', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('changed_values', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('ip_address', sa.VARCHAR(length=45), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True)
    )
    op.create_table('product_catalog',
    sa.Column('product_code', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('product_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('product_category', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('product_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('target_market', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('distribution_channels', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True),
    sa.Column('regulatory_approvals', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('pricing_model_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('underwriting_rules', postgresql.ARRAY(sa.INTEGER()), autoincrement=False, nullable=True),
    sa.Column('policy_terms', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('coverage_options', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('exclusions', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('commission_structure', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('launch_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('sunset_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False)
    )
    op.create_table('real_time_fraud_scores',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('entity_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('entity_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('model_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('fraud_probability', sa.NUMERIC(precision=8, scale=6), autoincrement=False, nullable=True),
    sa.Column('risk_level', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('contributing_factors', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('anomaly_indicators', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('investigation_priority', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('human_review_required', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('model_explanation', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('provider_service_prices',
    sa.Column('provider_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('service_tag', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('price', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('currency', sa.VARCHAR(length=10), server_default=sa.text("'USD'::character varying"), autoincrement=False, nullable=True),
    sa.Column('is_discounted', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('document_versions',
    sa.Column('document_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('version_number', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('file_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('uploaded_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['document_id'], ['documents.id'], name='document_versions_document_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='pk_document_versions_id')
    )
    op.create_index('idx_document_versions_doc', 'document_versions', ['document_id'], unique=False)
    op.create_table('ml_experiments',
    sa.Column('experiment_name', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('experiment_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('objective', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('base_model_version_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('dataset_version_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('experiment_config', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('hypothesis', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('success_criteria', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('expected_improvement', sa.NUMERIC(precision=5, scale=4), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=30), server_default=sa.text("'planned'::character varying"), autoincrement=False, nullable=True),
    sa.Column('started_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('completed_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('total_runtime_minutes', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('results', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('conclusions', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('lessons_learned', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('recommended_actions', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('next_experiments', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('voice_interactions',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('member_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('assistant_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('session_id', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('intent', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('utterance_text', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('confidence_score', sa.NUMERIC(precision=5, scale=4), autoincrement=False, nullable=True),
    sa.Column('entity_extractions', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('response_text', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('response_audio_url', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('interaction_duration_seconds', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('user_satisfaction', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('handoff_required', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('privacy_compliance', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('interaction_timestamp', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('vr_training_modules',
    sa.Column('module_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('training_category', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('difficulty_level', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('duration_minutes', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('learning_objectives', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('assessment_criteria', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('immersive_scenarios', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('completion_requirements', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('certification_credits', sa.NUMERIC(precision=4, scale=2), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('ai_pricing_traces',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('quotation_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('model_version', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('input_parameters', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('output_recommendation', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('confidence_score', sa.NUMERIC(precision=5, scale=4), autoincrement=False, nullable=True),
    sa.Column('processing_time_ms', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('real_time_catastrophe_monitoring',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('model_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('detection_timestamp', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('event_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('severity_level', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('confidence_score', sa.NUMERIC(precision=5, scale=4), autoincrement=False, nullable=True),
    sa.Column('affected_area', sa.NullType(), autoincrement=False, nullable=True),
    sa.Column('estimated_damage_usd', sa.NUMERIC(precision=18, scale=2), autoincrement=False, nullable=True),
    sa.Column('population_at_risk', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('properties_at_risk', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('alert_level', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('source_data_references', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('automated_response_actions', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('human_verification_status', sa.VARCHAR(length=30), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('provider_working_hours',
    sa.Column('provider_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('day_of_week', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('opens_at', postgresql.TIME(), autoincrement=False, nullable=True),
    sa.Column('closes_at', postgresql.TIME(), autoincrement=False, nullable=True),
    sa.Column('is_closed', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('voice_assistants',
    sa.Column('assistant_name', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('platform_type', sa.VARCHAR(length=30), autoincrement=False, nullable=True),
    sa.Column('supported_languages', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True),
    sa.Column('api_endpoint', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('authentication_config', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('capability_features', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('privacy_settings', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('integration_status', sa.VARCHAR(length=30), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('ml_models',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('model_name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('version', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('trained_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('accuracy', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('reinsurance_commissions',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('agreement_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('commission_type', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('rate', sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=True),
    sa.Column('cap', sa.NUMERIC(precision=12, scale=2), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.CheckConstraint("commission_type = ANY (ARRAY['sliding_scale'::text, 'flat'::text, 'no_commission'::text])", name='reinsurance_commissions_commission_type_check')
    )
    op.create_table('document_intelligence',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('document_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('nlp_model_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('extracted_entities', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('sentiment_analysis', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('contract_clauses', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('risk_indicators', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('compliance_flags', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('confidence_scores', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('processing_timestamp', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['document_id'], ['documents.id'], name='document_intelligence_document_id_fkey', ondelete='CASCADE')
    )
    op.create_table('provider_audit_logs',
    sa.Column('provider_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('action', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('performed_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('old_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('new_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False)
    )
    op.create_table('member_login_logs',
    sa.Column('member_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('login_time', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('ip_address', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('device_info', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('location', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False)
    )
    op.create_table('customer_journey_events',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('member_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('event_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('event_name', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('channel', sa.VARCHAR(length=30), autoincrement=False, nullable=True),
    sa.Column('touchpoint', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('event_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('session_id', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('user_agent', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('ip_address', postgresql.INET(), autoincrement=False, nullable=True),
    sa.Column('conversion_value', sa.NUMERIC(precision=15, scale=2), autoincrement=False, nullable=True),
    sa.Column('event_timestamp', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False)
    )
    op.create_table('reinsurance_agreements',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('reinsurer_name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('agreement_type', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('quota_share', sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=True),
    sa.Column('retention_limit', sa.NUMERIC(precision=12, scale=2), autoincrement=False, nullable=True),
    sa.Column('excess_limit', sa.NUMERIC(precision=12, scale=2), autoincrement=False, nullable=True),
    sa.Column('start_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('end_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('status', sa.TEXT(), server_default=sa.text("'active'::text"), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.CheckConstraint("agreement_type = ANY (ARRAY['quota_share'::text, 'excess_of_loss'::text, 'facultative'::text])", name='reinsurance_agreements_agreement_type_check'),
    sa.PrimaryKeyConstraint('id', name='reinsurance_agreements_pkey')
    )
    op.create_table('audit_trail_events',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('entity_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('entity_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('action', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('performed_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('performed_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='audit_trail_events_pkey')
    )
    op.create_table('member_tags',
    sa.Column('member_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('tag', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('documents',
    sa.Column('document_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('document_type', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('file_path', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('file_size', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('mime_type', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('status', postgresql.ENUM('pending', 'approved', 'rejected', 'expired', 'under_review', name='docstatusenum'), server_default=sa.text("'pending'::docstatusenum"), autoincrement=False, nullable=True),
    sa.Column('uploaded_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='documents_pkey')
    )
    op.create_index('idx_documents_uploaded_by', 'documents', ['uploaded_by', 'created_at'], unique=False)
    op.create_index('idx_documents_status', 'documents', ['status'], unique=False)
    op.create_table('commission_rules',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('plan_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('agent_type', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('commission_percent', sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=True),
    sa.Column('min_premium', sa.NUMERIC(precision=12, scale=2), autoincrement=False, nullable=True),
    sa.Column('max_cap', sa.NUMERIC(precision=12, scale=2), autoincrement=False, nullable=True),
    sa.Column('payment_type', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('permission_audit_logs',
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('role_before', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('role_after', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('changed_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('changed_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False)
    )
    op.create_table('blockchain_transactions',
    sa.Column('transaction_hash', sa.VARCHAR(length=66), autoincrement=False, nullable=False),
    sa.Column('smart_contract_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('from_address', sa.VARCHAR(length=42), autoincrement=False, nullable=True),
    sa.Column('to_address', sa.VARCHAR(length=42), autoincrement=False, nullable=True),
    sa.Column('value', sa.NUMERIC(precision=28, scale=18), autoincrement=False, nullable=True),
    sa.Column('gas_used', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('gas_price_gwei', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('transaction_fee', sa.NUMERIC(precision=28, scale=18), autoincrement=False, nullable=True),
    sa.Column('block_number', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=30), server_default=sa.text("'pending'::character varying"), autoincrement=False, nullable=True),
    sa.Column('transaction_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('confirmed_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('smart_home_events',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('system_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('event_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('severity', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('sensor_location', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('event_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('automated_response', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('human_verification_required', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('emergency_services_notified', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('insurance_claim_eligible', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('potential_claim_amount', sa.NUMERIC(precision=15, scale=2), autoincrement=False, nullable=True),
    sa.Column('event_timestamp', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True)
    )
    op.create_table('data_import_logs',
    sa.Column('file_name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('imported_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('rows_imported', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('import_time', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('status', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('error_log', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False)
    )
    op.create_table('regulatory_compliance',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('region', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('insurance_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('requirement_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('compliance_value', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('effective_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('end_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('archived_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    # ### end Alembic commands ###
